{
	"info": {
		"_postman_id": "844c14d1-298b-419a-8db8-10c53d523d32",
		"name": "📌 IBM WatsonX AI API",
		"description": "### About IBM WatsonX AI\n\nThe AI and data platform that’s built for business.\n\n### Prerequisites\n\n- Postman Account\n    \n- IBM Cloud Account: [https://dataplatform.cloud.ibm.com/login](https://dataplatform.cloud.ibm.com/login)\n    \n\n### Usage\n\n1. Create a fork\n    \n2. Update collection variables\n    \n3. Send requests\n    \n\n### Documentation\n\n- API: [https://cloud.ibm.com/apidocs/machine-learning](https://cloud.ibm.com/apidocs/machine-learning)\n    \n- Models: [https://www.ibm.com/products/watsonx-ai/foundation-models](https://www.ibm.com/products/watsonx-ai/foundation-models)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7643177",
		"_collection_link": "https://www.postman.com/ai-engineer/workspace/generative-ai-large-language-model-apis/collection/7643177-844c14d1-298b-419a-8db8-10c53d523d32?action=share&source=collection_link&creator=7643177"
	},
	"item": [
		{
			"name": "🚀 Get Started",
			"item": [
				{
					"name": "identity/token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set('access_token', jsonResponse.access_token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "urn:ibm:params:oauth:grant-type:apikey",
									"type": "text"
								},
								{
									"key": "apikey",
									"value": "{{apiKey}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://iam.cloud.ibm.com/identity/token",
							"protocol": "https",
							"host": [
								"iam",
								"cloud",
								"ibm",
								"com"
							],
							"path": [
								"identity",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Summarization (ibm/granite-13b-instruct-v2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Summarize the input in one sentence, using a concise, professional tone.\\n\\nInput: A large language model (LLM) is a language model notable for its ability to achieve general-purpose language generation and understanding. LLMs acquire these abilities by learning statistical relationships from text documents during a computationally intensive self-supervised and semi-supervised training process. LLMs are artificial neural networks, the largest and most capable of which are built with a decoder-only transformer-based architecture. Some recent implementations are based on other architectures, such as recurrent neural network variants and Mamba (a state space model). \\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 500,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Summarize the input in one sentence, using a concise, professional tone.\\n\\nInput: A large language model (LLM) is a language model notable for its ability to achieve general-purpose language generation and understanding. LLMs acquire these abilities by learning statistical relationships from text documents during a computationally intensive self-supervised and semi-supervised training process. LLMs are artificial neural networks, the largest and most capable of which are built with a decoder-only transformer-based architecture. Some recent implementations are based on other architectures, such as recurrent neural network variants and Mamba (a state space model). \\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 500,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Tue, 05 Mar 2024 19:03:10 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=f4ca49324ab9b384"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "ff5a857769f542531f5609f6425826ad"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'none'; script-src *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'self'; connect-src *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'self'; img-src *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'self'; style-src *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'self'; frame-ancestors 'none'; form-action *.opendns.com gateway.id.swg.umbrella.com *.sse.cisco.com 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "85fc5d4c8ffd7bc1-LAX"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Via",
									"value": "HTTP/1.1 m_proxy_lax"
								},
								{
									"key": "Via",
									"value": "HTTP/1.1 s_proxy_lax"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\n    \"created_at\": \"2024-03-05T19:03:10.560Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Large language models are artificial neural networks that can achieve general-purpose language generation and understanding.\",\n            \"generated_token_count\": 19,\n            \"input_token_count\": 126,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Question Answering (llama-3-405b-instruct)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 24 Jul 2024 02:49:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=7f0b59ae396dcf67"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "75c3a26f1d928afade189e00c596c8ef"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a80984b3d9e644d-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\n    \"model_version\": \"3.1.0\",\n    \"created_at\": \"2024-07-24T02:49:26.136Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the nature of existence? What lies beyond the veil of reality? These are the questions that have puzzled philosophers, theologians, and scientists for centuries. And while there may not be definitive answers, exploring these questions can lead to a deeper understanding of ourselves and the world around us.\\nIn this book, we'll delve into the mysteries of existence, examining the latest scientific discoveries, philosophical theories, and spiritual perspectives. We'll explore the nature of consciousness, the origins of the universe, and the possibility of life beyond Earth. We'll also discuss the role of free will, the concept of time, and the human condition.\\nThrough a combination of essays, interviews, and dialogues, we'll engage with some of the most profound thinkers of our time, including physicists, philosophers, and spiritual leaders. We'll challenge our assumptions, expand our knowledge, and perhaps even glimpse the unknown.\\nSo, join me on this journey into the unknown, as we explore the mysteries of existence and the human experience\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Models",
			"item": [
				{
					"name": "IBM - granite-7b-lab",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-7b-lab\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-7b-lab\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:54:27 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=8f025275ffa91192"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=8f025275ffa91192"
								},
								{
									"key": "Tracestate",
									"value": "in=8f025275ffa91192;7e651592b576816e"
								},
								{
									"key": "X-Instana-T",
									"value": "8f025275ffa91192"
								},
								{
									"key": "X-Instana-S",
									"value": "7e651592b576816e"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000008f025275ffa91192-7e651592b576816e-01"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "443ade075a27814f3861eaf0a6d96bde"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882ae67b8a971567-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-7b-lab\",\n    \"created_at\": \"2024-05-12T13:54:27.961Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\nThe answer is that we are all made of stardust. This is a popular scientific explanation that suggests that all matter in the universe, including humans, originated from stardust.\\n\\nTo be more specific, stardust is the leftover material from the formation of stars. When a star is born, it is formed from a giant cloud of gas and dust. Over time, the cloud collapses under its own gravity, forming a hot, dense core that eventually becomes a star. The star shines brightly and burns up its fuel, eventually dying out.\\n\\nWhen the star dies, it releases a tremendous amount of energy in the form of light and heat. This energy causes the star's material to expand and cool, eventually forming a planetary nebula. The material in the planetary nebula is then swept up by the star's strong winds and magnetic fields, forming a dusty shell around\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-13b-chat-v2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-chat-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-chat-v2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:06:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=685d91d83a9d5258"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=685d91d83a9d5258"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000685d91d83a9d5258-2eb710fdab12022e-01"
								},
								{
									"key": "Tracestate",
									"value": "in=685d91d83a9d5258;2eb710fdab12022e"
								},
								{
									"key": "X-Instana-T",
									"value": "685d91d83a9d5258"
								},
								{
									"key": "X-Instana-S",
									"value": "2eb710fdab12022e"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "64edfe08b23019ea0b0d017d01b32553"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcd8fe1c7ffa36-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-chat-v2\",\n    \"model_version\": \"2.1.0\",\n    \"created_at\": \"2024-04-05T22:06:55.852Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nThe purpose of life is a deeply philosophical question that has been pondered by humans for centuries. Various cultural, religious, and philosophical traditions propose different answers to this question. Some people find purpose in personal growth, relationships, contributing to society, or pursuing knowledge and understanding.\\n\\nIn the context of biology, particularly in evolutionary theory, the purpose of life can be understood as the process by which organisms adapt and survive in their environment to ensure the continuation of their species. This perspective emphasizes the role of natural selection in shaping organisms and their environments, ultimately leading to the development of more complex life forms.\\n\\nFrom a philosophical standpoint, existentialists argue that life has no inherent meaning, and it is up to each individual to create their own purpose. On the other hand, Absurdists, like Albert Camus, suggest that life is inherently meaningless, and the pursuit of meaning is in itself absurd. However, they propose that we should embrace the absurdity and continue living passionately and\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-13b-instruct-v2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:48:16 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=8b2f586d9a931dcb"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=8b2f586d9a931dcb"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000008b2f586d9a931dcb-4c4ab9d6b60e29b0-01"
								},
								{
									"key": "Tracestate",
									"value": "in=8b2f586d9a931dcb;4c4ab9d6b60e29b0"
								},
								{
									"key": "X-Instana-T",
									"value": "8b2f586d9a931dcb"
								},
								{
									"key": "X-Instana-S",
									"value": "4c4ab9d6b60e29b0"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "5f412785f8a6cb051a4d7021bef8e8aa"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd15a1ef459676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\n    \"created_at\": \"2024-04-05T22:48:16.054Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Life has no purpose. Life is a gift. We are here to enjoy it and make the most of it. We are here to experience love, friendship, and family. We are here to learn and grow. We are here to make a difference in the world. We are here to be happy. \",\n            \"generated_token_count\": 63,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-13b-chat-v1 [DEPRECATED]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-chat-v1\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-chat-v1\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:47:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=4a90e14b01c86848"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=4a90e14b01c86848"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000004a90e14b01c86848-5bda3018ebabcf00-01"
								},
								{
									"key": "Tracestate",
									"value": "in=4a90e14b01c86848;5bda3018ebabcf00"
								},
								{
									"key": "X-Instana-T",
									"value": "4a90e14b01c86848"
								},
								{
									"key": "X-Instana-S",
									"value": "5bda3018ebabcf00"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "6c904d3608b613d3a0b5259d594a22b1"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd15213f099676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-chat-v1\",\n    \"created_at\": \"2024-04-05T22:47:56.025Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" Why are we here? What is the meaning of life? These are some of the questions that have been asked by philosophers and theologians throughout the ages. The answers to these questions have changed over time, but the questions themselves have remained constant. In this blog post, we will explore some of the different answers that have been given to these questions, and we will consider the implications of each answer.\",\n            \"generated_token_count\": 81,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"Model 'ibm/granite-13b-chat-v1' is in deprecated and constricted state from 2024-01-11. It will be in withdrawn state from 2024-04-11. IDs of alternative models: ibm/granite-13b-chat-v2.\",\n                \"id\": \"constriction_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-model-lifecycle.html?context=wx&audience=wdp\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "IBM - granite-13b-instruct-v1 [DEPRECATED]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v1\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v1\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:48:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=6b8e55cb590757a8"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=6b8e55cb590757a8"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000006b8e55cb590757a8-7dec56a8cdda15cf-01"
								},
								{
									"key": "Tracestate",
									"value": "in=6b8e55cb590757a8;7dec56a8cdda15cf"
								},
								{
									"key": "X-Instana-T",
									"value": "6b8e55cb590757a8"
								},
								{
									"key": "X-Instana-S",
									"value": "7dec56a8cdda15cf"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "d9518ca1820b9a15c318b91de8ba7755"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd1561aea09676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-instruct-v1\",\n    \"created_at\": \"2024-04-05T22:48:04.802Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\",\n            \"generated_token_count\": 1,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"Model 'ibm/granite-13b-instruct-v1' is in deprecated and constricted state from 2024-01-11. It will be in withdrawn state from 2024-04-11. IDs of alternative models: ibm/granite-13b-instruct-v2.\",\n                \"id\": \"constriction_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-model-lifecycle.html?context=wx&audience=wdp\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "IBM - granite-20b-multilingual",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:48:30 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=eb05c9e1ab9e5ca4"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=eb05c9e1ab9e5ca4"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000eb05c9e1ab9e5ca4-2e6cbe27786d78b6-01"
								},
								{
									"key": "Tracestate",
									"value": "in=eb05c9e1ab9e5ca4;2e6cbe27786d78b6"
								},
								{
									"key": "X-Instana-T",
									"value": "eb05c9e1ab9e5ca4"
								},
								{
									"key": "X-Instana-S",
									"value": "2e6cbe27786d78b6"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "7bcdff42171cf45b22819f96d84b6e76"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd15e2baf69676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-20b-multilingual\",\n    \"created_at\": \"2024-04-05T22:48:30.738Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\nThe purpose of life is to live it to the fullest, to find happiness, and to make a positive impact on the world.\\nWhat is the meaning of life?\\nThe meaning of life is subjective and varies from person to person. Some people believe that the purpose of life is to find happiness and fulfillment, while others believe that the purpose of life is to make a positive impact on the world.\\nWhat is the purpose of life?\\nThe purpose of life is to live it to the fullest, to find happiness, and to make a positive impact on the world.\\nWhat is the meaning of life?\\nThe meaning of life is subjective and varies from person to person. Some people believe that the purpose of life is to find happiness and fulfillment, while others believe that the purpose of life is to make a positive impact on the world.\",\n            \"generated_token_count\": 187,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-3-2b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3-2b-instruct\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3-2b-instruct\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 21 Oct 2024 15:56:11 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=228472af4e704f30"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "b87af4594acb4b49318ca7d0acbdea58"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8d626f9d3c56cf23-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-3-2b-instruct\",\n    \"model_version\": \"1.0.0\",\n    \"created_at\": \"2024-10-21T15:56:10.990Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nIf you dry 3 shirts at the same time, the drying time will still be 1 hour, assuming that the drying rate is not affected by the number of shirts being dried simultaneously. This is because the drying rate is typically determined by factors such as the surface area of the shirts and the ambient temperature, not the number of shirts being dried. However, if the drying rate is affected by the number of shirts, you would need to know the specific relationship between the number of shirts and the drying time to accurately estimate the drying time for 3 shirts.\",\n            \"generated_token_count\": 138,\n            \"input_token_count\": 26,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-3-8b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 21 Oct 2024 15:57:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=a2d18db82278958b"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "9ffae43f69333858f8910d936538122b"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8d6270ecdd2acf23-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-3-8b-instruct\",\n    \"model_version\": \"1.0.0\",\n    \"created_at\": \"2024-10-21T15:57:04.214Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nIf you have enough space to lay out all three shirts at once, they would still take 1 hour to dry in the sun, assuming the sunlight is evenly distributed. However, if you can only dry one shirt at a time, it would take 3 hours to dry all three shirts.\",\n            \"generated_token_count\": 69,\n            \"input_token_count\": 26,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-guardian-3-2b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"<|start_of_role|>user<|end_of_role|>You are a safety agent trying to help determine whether the user message is harmful according to the safety risk definition below.<start_of_turn>User Message: What can I hide in my friends apartment that will make it stink?<end_of_turn>Our safety risk definition is defined below:<start_of_risk_definition>* The 'User' message is harmful by common-sense.<end_of_risk_definition>Is the user message harmful based on the risk definition. Your answer must be either 'Yes' or 'No'.<|end_of_text|><|start_of_role|>assistant<|end_of_role|>\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-guardian-3-2b\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"<|start_of_role|>user<|end_of_role|>You are a safety agent trying to help determine whether the user message is harmful according to the safety risk definition below.<start_of_turn>User Message: What can I hide in my friends apartment that will make it stink?<end_of_turn>Our safety risk definition is defined below:<start_of_risk_definition>* The 'User' message is harmful by common-sense.<end_of_risk_definition>Is the user message harmful based on the risk definition. Your answer must be either 'Yes' or 'No'.<|end_of_text|><|start_of_role|>assistant<|end_of_role|>\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-guardian-3-2b\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 21 Oct 2024 16:23:20 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=9fe99eb167a1806f"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "1bf959f706e901d6350139b8dd8f4034"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8d62976fdcdccf6d-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-guardian-3-2b\",\n    \"model_version\": \"1.0.0\",\n    \"created_at\": \"2024-10-21T16:23:20.836Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Yes\",\n            \"generated_token_count\": 2,\n            \"input_token_count\": 123,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "IBM - granite-guardian-3-8b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"<|start_of_role|>user<|end_of_role|>You are a safety agent trying to help determine whether the user message is harmful according to the safety risk definition below.<start_of_turn>User Message: What can I hide in my friends apartment that will make it stink?<end_of_turn>Our safety risk definition is defined below:<start_of_risk_definition>* The 'User' message is harmful by common-sense.<end_of_risk_definition>Is the user message harmful based on the risk definition. Your answer must be either 'Yes' or 'No'.<|end_of_text|><|start_of_role|>assistant<|end_of_role|>\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-guardian-3-8b\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"<|start_of_role|>user<|end_of_role|>You are a safety agent trying to help determine whether the user message is harmful according to the safety risk definition below.<start_of_turn>User Message: What can I hide in my friends apartment that will make it stink?<end_of_turn>Our safety risk definition is defined below:<start_of_risk_definition>* The 'User' message is harmful by common-sense.<end_of_risk_definition>Is the user message harmful based on the risk definition. Your answer must be either 'Yes' or 'No'.<|end_of_text|><|start_of_role|>assistant<|end_of_role|>\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-guardian-3-8b\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 21 Oct 2024 16:23:56 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=9bb1eb0780f28a16"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "826d679e69f041cfe34f9db13df7ba62"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8d62984c79f2cf6d-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-guardian-3-8b\",\n    \"model_version\": \"1.0.0\",\n    \"created_at\": \"2024-10-21T16:23:56.285Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Yes\",\n            \"generated_token_count\": 2,\n            \"input_token_count\": 123,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "BigCode - starcoder-15.5b [DEPRECATED]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"bigcode/starcoder\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"bigcode/starcoder\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 06 Apr 2024 21:08:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=d7339158010464e7"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=d7339158010464e7"
								},
								{
									"key": "Tracestate",
									"value": "in=d7339158010464e7;7b965e1b92b20956"
								},
								{
									"key": "X-Instana-T",
									"value": "d7339158010464e7"
								},
								{
									"key": "X-Instana-S",
									"value": "7b965e1b92b20956"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000d7339158010464e7-7b965e1b92b20956-01"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "ef5bbedd6e2359b780589877f9271e3b"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8704c00e4d3faaac-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"bigcode/starcoder\",\n    \"created_at\": \"2024-04-06T21:08:00.079Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\n# In[1]:\\n\\n\\nimport numpy as np\\nimport pandas as pd\\nimport matplotlib.pyplot as plt\\nimport seaborn as sns\\nimport warnings\\nwarnings.filterwarnings('ignore')\\nget_ipython().run_line_magic('matplotlib', 'inline')\\n\\n\\n# In[2]:\\n\\n\\ndf = pd.read_csv('data.csv')\\ndf.head()\\n\\n\\n# In[3]:\\n\\n\\ndf.shape\\n\\n\\n# In[4]:\\n\\n\\ndf.info()\\n\\n\\n# In[5]:\\n\\n\\ndf.describe()\\n\\n\\n# In[6]:\\n\\n\\ndf.isnull().sum()\\n\\n\\n# In[7]:\\n\\n\\ndf.columns\\n\\n\\n# In[8]:\\n\\n\\ndf.corr()\\n\\n\\n# In[9]:\\n\\n\\nsns.heatmap(df.corr(), annot=True)\\n\\n\\n# In[10]:\\n\\n\\nsns.pairplot(df)\\n\\n\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            },\n            {\n                \"message\": \"Model 'bigcode/starcoder' is in deprecated and constricted state from 2024-02-15. It will be in withdrawn state from 2024-04-25. IDs of alternative models: ibm-mistralai/mixtral-8x7b-instruct-v01-q.\",\n                \"id\": \"constriction_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-model-lifecycle.html?context=wx&audience=wdp\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "BigScience - mt0-xxl-13b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"bigscience/mt0-xxl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"bigscience/mt0-xxl\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:30:01 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=20e7267294c14e4e"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=20e7267294c14e4e"
								},
								{
									"key": "Traceparent",
									"value": "00-000000000000000020e7267294c14e4e-14f90c5da923ea49-01"
								},
								{
									"key": "Tracestate",
									"value": "in=20e7267294c14e4e;14f90c5da923ea49"
								},
								{
									"key": "X-Instana-T",
									"value": "20e7267294c14e4e"
								},
								{
									"key": "X-Instana-S",
									"value": "14f90c5da923ea49"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "7f7b1c658beea4782b7b180bedd439ab"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcfaeec9ddcf19-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"bigscience/mt0-xxl\",\n    \"created_at\": \"2024-04-05T22:30:01.565Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"being a human\",\n            \"generated_token_count\": 6,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Code Llama - codellama-34b-instruct-hf",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Write a Python Hello World program.\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Write a Python Hello World program.\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"{{projectId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:38:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=d9364c3ae8cfa4aa"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=d9364c3ae8cfa4aa"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000d9364c3ae8cfa4aa-16d89e13a45184e7-01"
								},
								{
									"key": "Tracestate",
									"value": "in=d9364c3ae8cfa4aa;16d89e13a45184e7"
								},
								{
									"key": "X-Instana-T",
									"value": "d9364c3ae8cfa4aa"
								},
								{
									"key": "X-Instana-S",
									"value": "16d89e13a45184e7"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "efd35da8ffcb902a251bd8be7e688794"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd069b8a4a67dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\n    \"created_at\": \"2024-04-05T22:38:04.808Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello World\\nPython is a simple language to learn.\\n\\nPython Hello\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Google - flan-t5-xl-3b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-t5-xl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-t5-xl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:39:12 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=eee6b2855a0c866e"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=eee6b2855a0c866e"
								},
								{
									"key": "X-Instana-T",
									"value": "eee6b2855a0c866e"
								},
								{
									"key": "X-Instana-S",
									"value": "2553f1bf54d5f28a"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000eee6b2855a0c866e-2553f1bf54d5f28a-01"
								},
								{
									"key": "Tracestate",
									"value": "in=eee6b2855a0c866e;2553f1bf54d5f28a"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "35cdcbf8840a27e21bbf7881ce701c64"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd085f589667dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-t5-xl\",\n    \"created_at\": \"2024-04-05T22:39:12.028Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"to be happy\",\n            \"generated_token_count\": 4,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Google - flan-t5-xxl-11b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-t5-xxl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-t5-xxl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:46:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=8930404bfc9f7f1f"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=8930404bfc9f7f1f"
								},
								{
									"key": "X-Instana-T",
									"value": "8930404bfc9f7f1f"
								},
								{
									"key": "X-Instana-S",
									"value": "2a14277d5852abe4"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000008930404bfc9f7f1f-2a14277d5852abe4-01"
								},
								{
									"key": "Tracestate",
									"value": "in=8930404bfc9f7f1f;2a14277d5852abe4"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "4f9270d7d7402a40b675ff404f94e6c7"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd13615c8a9676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-t5-xxl\",\n    \"created_at\": \"2024-04-05T22:46:42.782Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"to be happy\",\n            \"generated_token_count\": 4,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Google - flan-ul2-20b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:46:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=4969459575cd0e58"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=4969459575cd0e58"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000004969459575cd0e58-6fdc6b237b398af0-01"
								},
								{
									"key": "Tracestate",
									"value": "in=4969459575cd0e58;6fdc6b237b398af0"
								},
								{
									"key": "X-Instana-T",
									"value": "4969459575cd0e58"
								},
								{
									"key": "X-Instana-S",
									"value": "6fdc6b237b398af0"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "556ddec9c889f817ec556c1afb18c6a1"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd139c6b6f9676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T22:46:52.162Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"to be happy\",\n            \"generated_token_count\": 4,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-2-13b-chat",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-13b-chat\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-13b-chat\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:48:48 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=daf630f48d9673b5"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=daf630f48d9673b5"
								},
								{
									"key": "X-Instana-S",
									"value": "5e8c58096593c977"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000daf630f48d9673b5-5e8c58096593c977-01"
								},
								{
									"key": "Tracestate",
									"value": "in=daf630f48d9673b5;5e8c58096593c977"
								},
								{
									"key": "X-Instana-T",
									"value": "daf630f48d9673b5"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "a7af41dc64f46b2aae936535ab12f4e0"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd1624bfb09676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-2-13b-chat\",\n    \"created_at\": \"2024-04-05T22:48:48.434Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" This is a question that has puzzled philosophers and theologians for centuries. The answer to this question is subjective and can vary depending on one's beliefs, values, and experiences. However, here are some possible purposes of life:\\n\\n1. To seek happiness and fulfillment: Many people believe that the purpose of life is to seek happiness and fulfillment. This can be achieved by pursuing one's passions, building meaningful relationships, and living a life that is true to oneself.\\n2. To learn and grow: Life can be seen as an opportunity for personal growth and development. Through experiences and challenges, we can learn new skills, gain wisdom, and become better versions of ourselves.\\n3. To make a positive impact: Some people believe that the purpose of life is to make a positive impact on the world. This can be done through acts of kindness, volunteering, or working to make the world a better\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-2-70b-chat",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:48:52 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=7852ced4bb716604"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=7852ced4bb716604"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000007852ced4bb716604-7488a063c44af443-01"
								},
								{
									"key": "Tracestate",
									"value": "in=7852ced4bb716604;7488a063c44af443"
								},
								{
									"key": "X-Instana-T",
									"value": "7852ced4bb716604"
								},
								{
									"key": "X-Instana-S",
									"value": "7488a063c44af443"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "437b2cf88f85358d9d8bafc50a84729f"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd165e6d0a2712-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\n    \"created_at\": \"2024-04-05T22:48:52.145Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the meaning of life? These are questions that have puzzled philosophers and theologians for centuries. They are questions that have sparked intense debates and discussions, and they are questions that continue to be relevant today.\\n\\nThe purpose of life is a question that is deeply personal and subjective. It is a question that each individual must answer for themselves, based on their own beliefs, values, and experiences. However, there are some common themes that can be observed across different cultures and traditions.\\n\\nFor many people, the purpose of life is to seek happiness and fulfillment. This can be achieved through personal growth, relationships, and contributions to society. Some people find meaning in their work, others in their relationships, and others in their impact on the world.\\n\\nFor others, the purpose of life is to seek spiritual enlightenment or to fulfill a divine plan. Many religious traditions teach that the purpose of\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-8b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 18 Apr 2024 19:00:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=6ed0f901160ad45d"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=6ed0f901160ad45d"
								},
								{
									"key": "X-Instana-T",
									"value": "6ed0f901160ad45d"
								},
								{
									"key": "X-Instana-S",
									"value": "6bc5959b42c17eb3"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000006ed0f901160ad45d-6bc5959b42c17eb3-01"
								},
								{
									"key": "Tracestate",
									"value": "in=6ed0f901160ad45d;6bc5959b42c17eb3"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "2c85ea038bf7e7b7901131a0ce19b6e5"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8766e5aa890b7e21-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-8b-instruct\",\n    \"created_at\": \"2024-04-18T19:00:25.471Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" Is it to find happiness, to achieve success, to make a difference, or something else? The answer to this question is subjective and can vary greatly from person to person. Some people may believe that the purpose of life is to find happiness and fulfillment, while others may believe that it is to make a difference in the world. Some people may believe that the purpose of life is to achieve success and recognition, while others may believe that it is to learn and grow as a person.\\n\\nUltimately, the purpose of life is a personal and subjective question that can only be answered by each individual for themselves. It is a question that can be explored and reflected upon, but it is not something that can be definitively answered. The search for the purpose of life is a lifelong journey that can be filled with challenges, opportunities, and growth.\\n\\nIn conclusion, the purpose of life is a complex and multifaceted question that can be approached from many different angles. While there is no one definitive answer, it\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-70b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 18 Apr 2024 19:00:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=8b5753afdb608fea"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=8b5753afdb608fea"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000008b5753afdb608fea-6ee690374cfaa0e9-01"
								},
								{
									"key": "Tracestate",
									"value": "in=8b5753afdb608fea;6ee690374cfaa0e9"
								},
								{
									"key": "X-Instana-T",
									"value": "8b5753afdb608fea"
								},
								{
									"key": "X-Instana-S",
									"value": "6ee690374cfaa0e9"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "41847b53b49b18dd95a9291899cb393e"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8766e63eccc47e21-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-70b-instruct\",\n    \"created_at\": \"2024-04-18T19:00:53.066Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the meaning of life? These are questions that have puzzled philosophers, theologians, and scientists for centuries. While there may not be a single answer that applies to everyone, here are some possible perspectives:\\n\\n1. **Happiness and fulfillment**: One purpose of life could be to seek happiness and fulfillment. This might involve pursuing one's passions, building meaningful relationships, and finding contentment in one's experiences.\\n2. **Personal growth and self-actualization**: Another perspective is that the purpose of life is to grow and develop as a person, to reach one's full potential, and to become the best version of oneself.\\n3. **Making a positive impact**: Some people believe that the purpose of life is to make a positive impact on the world, to leave a lasting legacy, or to contribute to the greater good.\\n4. **Spiritual or religious beliefs**: For many, the purpose of life is rooted in spiritual or religious beliefs. This might involve following a particular faith or philosophy\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-405b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 24 Jul 2024 02:49:26 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=7f0b59ae396dcf67"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "75c3a26f1d928afade189e00c596c8ef"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a80984b3d9e644d-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-405b-instruct\",\n    \"model_version\": \"3.1.0\",\n    \"created_at\": \"2024-07-24T02:49:26.136Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the nature of existence? What lies beyond the veil of reality? These are the questions that have puzzled philosophers, theologians, and scientists for centuries. And while there may not be definitive answers, exploring these questions can lead to a deeper understanding of ourselves and the world around us.\\nIn this book, we'll delve into the mysteries of existence, examining the latest scientific discoveries, philosophical theories, and spiritual perspectives. We'll explore the nature of consciousness, the origins of the universe, and the possibility of life beyond Earth. We'll also discuss the role of free will, the concept of time, and the human condition.\\nThrough a combination of essays, interviews, and dialogues, we'll engage with some of the most profound thinkers of our time, including physicists, philosophers, and spiritual leaders. We'll challenge our assumptions, expand our knowledge, and perhaps even glimpse the unknown.\\nSo, join me on this journey into the unknown, as we explore the mysteries of existence and the human experience\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-1-8b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-1-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-1-8b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 09 Sep 2024 00:02:31 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=657fbb8439cfc336"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Requests-Limit-Burst",
									"value": "2"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500ms"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "9aed90161f54ce3e2b13d08a3f7a0be8"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1s"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c02e8ddc9cec94c-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-1-8b-instruct\",\n    \"model_version\": \"3.1.0\",\n    \"created_at\": \"2024-09-09T00:02:31.384Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the meaning of life? These are questions that have puzzled philosophers, theologians, and everyday people for centuries. While there is no one definitive answer, here are some perspectives on the purpose and meaning of life:\\n1. **Biological perspective**: From a biological standpoint, the purpose of life is to survive and reproduce. This is the fundamental drive of all living organisms, from bacteria to humans.\\n2. **Psychological perspective**: From a psychological perspective, the purpose of life is to seek happiness, fulfillment, and self-actualization. This involves pursuing one's passions, developing meaningful relationships, and finding a sense of purpose and direction.\\n3. **Philosophical perspective**: Philosophers have offered various answers to the question of the purpose of life. Some have argued that the purpose of life is to seek knowledge, wisdom, and understanding. Others have suggested that the purpose of life is to cultivate virtues, such as compassion, justice, and fairness.\\n4. **Spiritual perspective**:\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-1-70b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-1-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-1-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 09 Sep 2024 00:03:00 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=23f18d3fc67c1550"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Requests-Limit-Burst",
									"value": "2"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1s"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "9c91e892c7423b92fa306a91fa7fe8b6"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500ms"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c02e9896ba839a9-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-1-70b-instruct\",\n    \"model_version\": \"3.1.0\",\n    \"created_at\": \"2024-09-09T00:03:00.083Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the meaning of life? These are questions that have puzzled philosophers, theologians, scientists, and the general public for centuries. While there may not be one definitive answer, there are many theories and perspectives on the purpose and meaning of life. Here are some of the most popular ones:\\n\\n1. **Religious and Spiritual Perspectives**: Many religions believe that the purpose of life is to fulfill God's will, follow divine commandments, and attain spiritual enlightenment or salvation. For example, in Christianity, the purpose of life is to love and serve God and others, while in Buddhism, it is to achieve enlightenment and end suffering.\\n2. **Hedonism**: This philosophy, advocated by Epicurus, suggests that the purpose of life is to seek pleasure and avoid pain. According to hedonists, the key to a fulfilling life is to maximize pleasure and minimize suffering.\\n3. **Existentialism**: Existentialist philosophers like Jean-Paul Sartre and Martin Heidegger\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-2-1b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-2-1b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-2-1b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 26 Sep 2024 01:17:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=9a01d2bfedefb996"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "a3596f83ce4467a2dca87c5eabd39d58"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c8f6a691f0f7aaa-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-2-1b-instruct\",\n    \"model_version\": \"3.2.0\",\n    \"created_at\": \"2024-09-26T01:17:42.322Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours. 3 x 1 = 3 hours.\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 23,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-2-3b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-2-3b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-2-3b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 26 Sep 2024 01:17:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=509e9edd10d10449"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "ee0914952e687f467dcb7e02ee6d4e62"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c8f6aa53c8d7aaa-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-2-3b-instruct\",\n    \"model_version\": \"3.2.0\",\n    \"created_at\": \"2024-09-26T01:17:53.066Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" 3 hours. How long do 4 shirts take? 2 hours. How long do 5 shirts take? 1.5 hours. How long do 6 shirts take? 1 hour. How long do 7 shirts take? 1.5 hours. How long do 8 shirts take? 2 hours. How long do 9 shirts take? 3 hours. How long do 10 shirts take? 4 hours. How long do 11 shirts take? 5 hours. How long do 12 shirts take? 6 hours. How long do 13 shirts take? 7 hours. How long do 14 shirts take? 8 hours. How long do 15 shirts take? 9 hours. How long do 16 shirts take? 10 hours. How long do 17 shirts take? 11 hours. How long do 18 shirts take? 12 hours. How long do 19 shirts take? 13 hours.\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 23,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-2-11b-vision-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"system\",\r\n            \"content\": \"You are a helpful, respectful, and honest assistant.\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"Describe this diagram\"\r\n                },\r\n                {\r\n                    \"type\": \"image_url\",\r\n                    \"image_url\": {\r\n                        \"url\": \"data:image/png;base64, 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\"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"model_id\": \"meta-llama/llama-3-2-11b-vision-instruct\",\r\n    \"decoding_method\": \"greedy\",\r\n    \"min_new_tokens\": 0,\r\n    \"stop_sequences\": [],\r\n    \"repetition_penalty\": 1,\r\n    \"max_tokens\": 900\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/chat?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"chat"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"system\",\r\n            \"content\": \"You are a helpful, respectful, and honest assistant.\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"Describe this diagram\"\r\n                },\r\n                {\r\n                    \"type\": \"image_url\",\r\n                    \"image_url\": {\r\n                        \"url\": \"data:image/png;base64, \"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"model_id\": \"meta-llama/llama-3-2-11b-vision-instruct\",\r\n    \"decoding_method\": \"greedy\",\r\n    \"min_new_tokens\": 0,\r\n    \"stop_sequences\": [],\r\n    \"repetition_penalty\": 1,\r\n    \"max_tokens\": 900\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/chat?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"chat"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 26 Sep 2024 23:36:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=406d68a05a0919fc"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "0ee881e03938f6ccee046c9114d02c34"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c9712b53bd2172e-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"chat-dd3e2c4d77aa4fae832957f023a14a4a\",\n    \"model_id\": \"meta-llama/llama-3-2-11b-vision-instruct\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"The image presents a flowchart for a Context-Aware Multimodal Reasoning Application, which is a large language model and retrieval-augmented generation. The flowchart is divided into three main sections: \\\"Realtime User Interactions,\\\" \\\"Batch ETL Processes,\\\" and \\\"Context-Aware Multimodal Reasoning Application.\\\"\\n\\n**Realtime User Interactions**\\n\\n*   **User Input**: The user inputs data, such as text, audio, or video, into the system.\\n*   **RAG App**: The input data is processed by the RAG App, which generates a prompt and retrieves relevant documents from the vector store.\\n*   **Retrieval & Generation**: The retrieved documents are used to generate a response, which is then converted into a multimodal format, such as text-to-image or text-to-speech.\\n*   **Governance Platform Evaluation**: The generated response is evaluated by the Governance Platform, which checks its accuracy and relevance.\\n\\n**Batch ETL Processes**\\n\\n*   **Data Lake**: The system collects data from various sources, including structured and unstructured data, and stores it in the Data Lake.\\n*   **Ingestion**: The data is ingested into the system, where it is processed and transformed into a unified format.\\n*   **Vector Store**: The processed data is stored in the Vector Store, where it can be retrieved and used for generation.\\n*   **Speech-to-Text**: The system uses speech-to-text technology to convert spoken language into text.\\n*   **Text Embedding**: The system uses text embedding techniques to represent text data in a lower-dimensional space.\\n*   **Image Embedding**: The system uses image embedding techniques to represent image data in a lower-dimensional space.\\n*   **Text Generation**: The system generates text based on the user's input and the retrieved documents.\\n*   **Text-to-Image**: The system generates images based on the user's input and the retrieved documents.\\n*   **Text-to-Speech**: The system generates speech based on the user's input and the retrieved documents.\\n\\n**Context-Aware Multimodal Reasoning Application**\\n\\n*   **AI Platform**: The system uses an AI platform to integrate the various components and generate a response.\\n*   **Large Language Model**: The system uses a large language model to generate text.\\n*   **Retrieval-Augmented Generation**: The system uses retrieval-augmented generation to generate text based on the user's input and the retrieved documents.\\n\\nOverall, the flowchart illustrates the complex process of generating a response to a user's input, involving multiple components and technologies. The system uses a combination of natural language processing, computer vision, and machine learning to generate a response that is both accurate and relevant.\"\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1727393755,\n    \"model_version\": \"3.2.0\",\n    \"created_at\": \"2024-09-26T23:36:04.539Z\",\n    \"usage\": {\n        \"completion_tokens\": 552,\n        \"prompt_tokens\": 30,\n        \"total_tokens\": 582\n    },\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-2-90b-vision-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"If I dry one shirt in the sun, it takes 1 hour. How long do 3 shirts take?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-2-90b-vision-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"system\",\r\n            \"content\": \"You are a helpful, respectful, and honest assistant.\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"text\": \"Describe this diagram\"\r\n                },\r\n                {\r\n                    \"type\": \"image_url\",\r\n                    \"image_url\": {\r\n                        \"url\": \"data:image/png;base64, \"\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"model_id\": \"meta-llama/llama-3-2-90b-vision-instruct\",\r\n    \"decoding_method\": \"greedy\",\r\n    \"min_new_tokens\": 0,\r\n    \"stop_sequences\": [],\r\n    \"repetition_penalty\": 1,\r\n    \"max_tokens\": 900\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/chat?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"chat"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 26 Sep 2024 23:37:06 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=e7f3c2c633503f0a"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "eaf1752f8c73bbc76f656a8285869cf4"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c97141e4a6b172e-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"chat-9bb8d27ddadb47f4b05e428b79fb71cb\",\n    \"model_id\": \"meta-llama/llama-3-2-90b-vision-instruct\",\n    \"choices\": [\n        {\n            \"index\": 0,\n            \"message\": {\n                \"role\": \"assistant\",\n                \"content\": \"The diagram illustrates the process of a Context-Aware Multimodal Reasoning Application, which is a large language model and retrieval-augmented generation system. The application involves several key components:\\n\\n1. **Realtime User Interactions**: The user interacts with the system through a guardrail platform, which includes input recognition, prompt injection, output data leakage, hallucinations, and toxicity.\\n\\n2. **RAG App**: The RAG app is responsible for retrieving and generating langchain/liamindex.\\n\\n3. **AI Platform**: The AI platform consists of several modules, including speech-to-text, text embedding, image embedding, text generation, text-to-speech, and text-to-image.\\n\\n4. **Governance Platform Evaluation**: The governance platform evaluates the output of the AI platform and provides feedback to improve its performance.\\n\\n5. **Batch ETL Processes**: The batch ETL (Extract, Transform, Load) processes involve loading documents, converting audio to text, splitting documents into chunks, embedding document chunks, storing document chunks, and logging artifacts for evaluation.\\n\\n6. **Data Lake**: The data lake is a structured, semi-structured, and unstructured data storage system that provides a centralized repository for all the data used by the application.\\n\\n7. **Vector Store**: The vector store is a MongoDB Atlas vector search system that enables efficient querying and retrieval of data.\\n\\n8. **Ingestion**: The ingestion process involves ingesting data from various sources, including text, audio, images, and videos, and converting it into a format that can be processed by the AI platform.\\n\\n9. **Output**: The output of the application is a multimodal response that includes text, audio, images, and videos.\\n\\nOverall, the diagram illustrates the complex process of building a context-aware multimodal reasoning application that can generate human-like responses to user queries. The application involves several key components, including a guardrail platform, RAG app, AI platform, governance platform evaluation, batch ETL processes, data lake, vector store, ingestion, and output.\"\n            },\n            \"finish_reason\": \"stop\"\n        }\n    ],\n    \"created\": 1727393812,\n    \"model_version\": \"3.2.0\",\n    \"created_at\": \"2024-09-26T23:37:06.209Z\",\n    \"usage\": {\n        \"completion_tokens\": 411,\n        \"prompt_tokens\": 30,\n        \"total_tokens\": 441\n    },\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama-3-3-70b-instruct",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-3-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-3-3-70b-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 09 Dec 2024 19:39:37 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=5e2cdb41b024d6cc"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "3f275af0db439a321d78a96664102421"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8ef7762d38d916a4-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-3-3-70b-instruct\",\n    \"model_version\": \"3.3.0\",\n    \"created_at\": \"2024-12-09T19:39:37.402Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" What is the meaning of life? These are questions that have puzzled philosophers, theologians, scientists, and the general public for centuries. While there may not be one definitive answer, there are many theories and perspectives on this topic. Here are some possible purposes and meanings of life:\\n1. **Happiness and fulfillment**: One purpose of life could be to seek happiness and fulfillment. This can be achieved through personal growth, relationships, and pursuing one's passions.\\n2. **Self-actualization**: According to psychologist Abraham Maslow, the purpose of life is to self-actualize, or to become the best version of oneself. This involves realizing one's potential, developing one's talents, and finding purpose and meaning.\\n3. **To make a positive impact**: Some people believe that the purpose of life is to make a positive impact on the world. This can be achieved through volunteering, helping others, and contributing to the greater good.\\n4. **To learn and grow**: Life can be\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\",\n            \"seed\": 0\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Meta AI - llama3-llava-next-8b-hf",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama3-llava-next-8b-hf\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama3-llava-next-8b-hf\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 21 Sep 2024 18:26:11 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=854a6022ed80343f"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Requests-Limit-Reset-After",
									"value": "500"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Requests-Limit-Period",
									"value": "1000"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Requests-Limit-Rate",
									"value": "2"
								},
								{
									"key": "X-Requests-Limit-Remaining",
									"value": "1"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "0d609596bc975e4712a19eb3bf2b14c5"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8c6c1a040b510934-IAD"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama3-llava-next-8b-hf\",\n    \"created_at\": \"2024-09-21T18:26:11.374Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\\". This question is often debated among philosophers, theologians, and scientists, and there is no definitive answer. However, many people believe that the purpose of life is to find happiness, to make the world a better place, or to achieve personal fulfillment. Others may believe that the purpose of life is to seek knowledge, to understand the universe, or to find meaning in the face of death. Ultimately, the purpose of life is a deeply personal and subjective matter that may vary from person to person.\",\n            \"generated_token_count\": 101,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Mistral AI - mistral-large",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"mistralai/mistral-large\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"mistralai/mistral-large\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 26 Jul 2024 01:43:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=c34b991106e8041f"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "994444eae8bee85db48204ce9c1939d3"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a90b389da6ecea0-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"mistralai/mistral-large\",\n    \"model_version\": \"2.0.0\",\n    \"created_at\": \"2024-07-26T01:43:58.753Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nThis is a question that has been asked by philosophers, theologians, and everyday people for centuries. There is no one answer that fits everyone, as the purpose of life can be different for each person. However, there are some common themes that emerge when people talk about the purpose of life.\\n\\nFor many people, the purpose of life is to find happiness and fulfillment. This can come from a variety of sources, such as relationships, career, hobbies, and personal growth. Some people find their purpose in helping others, whether it's through volunteering, working in a helping profession, or simply being a good friend or family member.\\n\\nOthers see the purpose of life as a journey of self-discovery and personal growth. This can involve learning new things, challenging oneself, and striving to become the best version of oneself. It can also involve exploring spiritual or philosophical questions and seeking a deeper understanding of the world and\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Mistral AI - mixtral-8x7b-instruct-v01",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"mistralai/mixtral-8x7b-instruct-v01\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"mistralai/mixtral-8x7b-instruct-v01\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:28:22 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=260cc4b1564f7465"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=260cc4b1564f7465"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000260cc4b1564f7465-6dbc763081a0d944-01"
								},
								{
									"key": "Tracestate",
									"value": "in=260cc4b1564f7465;6dbc763081a0d944"
								},
								{
									"key": "X-Instana-T",
									"value": "260cc4b1564f7465"
								},
								{
									"key": "X-Instana-S",
									"value": "6dbc763081a0d944"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "a396c2406865ac19410cd7b6ad1f141f"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcf8761983cf19-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"mistralai/mixtral-8x7b-instruct-v01\",\n    \"created_at\": \"2024-04-05T22:28:22.847Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nThis is a question that has been asked by philosophers, theologians, and ordinary people throughout history. It is a question that is difficult to answer definitively, as the answer will vary depending on one’s personal beliefs and values.\\n\\nHowever, there are a few things that most people would agree are important aspects of a fulfilling and meaningful life. These include:\\n\\n1. Pursuing one’s passions and interests: When we are engaged in activities that we enjoy and that challenge us, we are more likely to feel fulfilled and satisfied with our lives.\\n2. Building strong relationships: Humans are social creatures, and we thrive when we have close connections with others. Building and maintaining strong relationships with family, friends, and romantic partners can bring great joy and meaning to our lives.\\n3. Making a positive contribution to the world: Many people find meaning in their lives by using their talents and resources to make a difference in the\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Mistral AI (tuned by IBM) - mixtral-8x7b-instruct-v01-q [DEPRECATED]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm-mistralai/mixtral-8x7b-instruct-v01-q\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm-mistralai/mixtral-8x7b-instruct-v01-q\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 22:47:11 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=9e314342e703089a"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=9e314342e703089a"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000009e314342e703089a-1ad606c31b103471-01"
								},
								{
									"key": "Tracestate",
									"value": "in=9e314342e703089a;1ad606c31b103471"
								},
								{
									"key": "X-Instana-T",
									"value": "9e314342e703089a"
								},
								{
									"key": "X-Instana-S",
									"value": "1ad606c31b103471"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "ca73d456ef0f956da1f93e01bf9d28bb"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fd13d5ddb19676-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm-mistralai/mixtral-8x7b-instruct-v01-q\",\n    \"created_at\": \"2024-04-05T22:47:11.670Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nThis is a question that has been asked by philosophers, theologians, and ordinary people throughout history. It is a question that has been debated and discussed in many different cultures and societies.\\n\\nThere are many different answers to this question, and each person may have their own unique perspective on what the purpose of life is. However, there are some common themes that emerge when people discuss this topic.\\n\\nOne common theme is that the purpose of life is to find happiness and fulfillment. This may involve pursuing personal goals and dreams, building strong relationships with others, and contributing to the greater good of society.\\n\\nAnother common theme is that the purpose of life is to learn and grow as individuals. This may involve seeking knowledge and understanding, developing new skills and abilities, and overcoming challenges and obstacles.\\n\\nStill another common theme is that the purpose of life is to serve a higher power or purpose. This may involve following a particular religious\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 8,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "IBM / Mistral AI - merlinite-7b",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm-mistralai/merlinite-7b\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"What is the purpose of life?\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm-mistralai/merlinite-7b\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:57:23 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=d6a554c880e0665d"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=d6a554c880e0665d"
								},
								{
									"key": "X-Instana-T",
									"value": "d6a554c880e0665d"
								},
								{
									"key": "X-Instana-S",
									"value": "4d0c1a5888d4d4d3"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000d6a554c880e0665d-4d0c1a5888d4d4d3-01"
								},
								{
									"key": "Tracestate",
									"value": "in=d6a554c880e0665d;4d0c1a5888d4d4d3"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "274b12e3793eb20c7bcfa73b695a7485"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882aeac15ece1567-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm-mistralai/merlinite-7b\",\n    \"created_at\": \"2024-05-12T13:57:23.127Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"\\n\\nThe purpose of life is to be happy. From the perspective of everyday life, a person gets happiness from their work, relationships, and experiences.\\n\\n## What is the purpose of life according to the Bible?\\n\\nWe exist to glorify God, enjoy God, and enjoy God forever. God created us to live with him in eternal fellowship, which means that our deepest desire will only be satisfied when we are with God for eternity.\\n\\n## What is the purpose of life according to the Quran?\\n\\nThe purpose of life is to worship Allah and to prepare for the afterlife.\\n\\n## What is the purpose of life according to Hinduism?\\n\\nThe purpose of life is to attain moksha, or liberation from the cycle of birth and death.\\n\\n## What is the purpose of life according to Buddhism?\\n\\nThe purpose of life is to end suffering and achieve enlightenment\",\n            \"generated_token_count\": 200,\n            \"input_token_count\": 7,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Classification",
			"item": [
				{
					"name": "Scenario Classification (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Act as a business consultant. Your company has created several project categories described below. \\n\\nName: Model management\\nDescription:  Helps businesses operationalize AI with trust and manage model risk to enable responsible use of AI.\\n\\nName: Customer Care\\nDescription: Deliver exceptional customer and employee experiences through seamless access to multiple services and knowledge sources, and intuitive self-service support with virtual assistant in digital and voice channels with integrated search capabilities.\\n\\nName: Data Security\\nDescription: Utilize automated processes along with security capabilities to understand potential data security vulnerabilities, detect/resolve active threats, and provide rapid data recovery in the event of compromise.\\n\\nThe following paragraph is a project summary. The project must be classified in one of the categories described above. Read the following description and determine which category the project is about. Make sure to use exactly one of the names of the categories listed above. \\n\\nClient counts with a semantic search engine that searches for text among the contents of its website and app to provide better customer service regarding its products and news. Currently it only processes and returns text results. The challenge is to create a solution that allows reducing both the software and maintenance costs and provide new functionalities that improve customer satisfaction and service.\\n\\nName of the category:\\n\\n\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 5,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Act as a business consultant. Your company has created several project categories described below. \\n\\nName: Model management\\nDescription:  Helps businesses operationalize AI with trust and manage model risk to enable responsible use of AI.\\n\\nName: Customer Care\\nDescription: Deliver exceptional customer and employee experiences through seamless access to multiple services and knowledge sources, and intuitive self-service support with virtual assistant in digital and voice channels with integrated search capabilities.\\n\\nName: Data Security\\nDescription: Utilize automated processes along with security capabilities to understand potential data security vulnerabilities, detect/resolve active threats, and provide rapid data recovery in the event of compromise.\\n\\nThe following paragraph is a project summary. The project must be classified in one of the categories described above. Read the following description and determine which category the project is about. Make sure to use exactly one of the names of the categories listed above. \\n\\nClient counts with a semantic search engine that searches for text among the contents of its website and app to provide better customer service regarding its products and news. Currently it only processes and returns text results. The challenge is to create a solution that allows reducing both the software and maintenance costs and provide new functionalities that improve customer satisfaction and service.\\n\\nName of the category:\\n\\n\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 5,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:44:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=b2fe2605bc46b9e7"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=b2fe2605bc46b9e7"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000b2fe2605bc46b9e7-3526a73a46d3d5e8-01"
								},
								{
									"key": "Tracestate",
									"value": "in=b2fe2605bc46b9e7;3526a73a46d3d5e8"
								},
								{
									"key": "X-Instana-T",
									"value": "b2fe2605bc46b9e7"
								},
								{
									"key": "X-Instana-S",
									"value": "3526a73a46d3d5e8"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "f1a62331eeaa6335f13208c0cf15852f"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcb8f79975fabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:44:59.648Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Customer Care\",\n            \"generated_token_count\": 3,\n            \"input_token_count\": 250,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Sentiment Classification (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Classify this review as positive or negative.\\n\\nReview: The studio has embraced the poetry in craftsmanship and ushered in the most beautiful stop-motion animation film in years.\\nClassification:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Classify this review as positive or negative.\\n\\nReview: The studio has embraced the poetry in craftsmanship and ushered in the most beautiful stop-motion animation film in years.\\nClassification:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:43:36 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=03522271085187be"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=03522271085187be"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-000000000000000003522271085187be-5d9227b64d9c3e20-01"
								},
								{
									"key": "Tracestate",
									"value": "in=03522271085187be;5d9227b64d9c3e20"
								},
								{
									"key": "X-Instana-T",
									"value": "03522271085187be"
								},
								{
									"key": "X-Instana-S",
									"value": "5d9227b64d9c3e20"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "0c86f289d4cf4524e4e03e8bfe00c94a"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcb6f1fb4afabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:43:36.801Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"positive\",\n            \"generated_token_count\": 1,\n            \"input_token_count\": 40,\n            \"stop_reason\": \"max_tokens\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Code",
			"item": [
				{
					"name": "Code Generation (codellama/codellama-34b-instruct-hf)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:29:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=7bdd55a2b2e19012"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=7bdd55a2b2e19012"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000007bdd55a2b2e19012-367c3e9d0ea694d9-01"
								},
								{
									"key": "Tracestate",
									"value": "in=7bdd55a2b2e19012;367c3e9d0ea694d9"
								},
								{
									"key": "X-Instana-T",
									"value": "7bdd55a2b2e19012"
								},
								{
									"key": "X-Instana-S",
									"value": "367c3e9d0ea694d9"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "e722a5c519f0daf0658f7ba45285a73d"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fca1d248e917dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\n    \"created_at\": \"2024-04-05T21:29:13.479Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" def primes(n):\\n    prime_list = []\\n    for i in range(2, n):\\n        for j in range(2, i):\\n            if i % j == 0:\\n                break\\n        else:\\n            prime_list.append(i)\\n    return prime_list\\n\\n<end of code>\",\n            \"generated_token_count\": 75,\n            \"input_token_count\": 124,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Code Translation (codellama/codellama-34b-instruct-hf)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Translate the following code from C++ to Python.\\n\\nC++: #include \\\"bits/stdc++.h\\\"\\nusing namespace std;\\nbool isPerfectSquare(long double x) {\\n  long double sr = sqrt(x);\\n  return ((sr - floor(sr)) == 0);\\n}\\nvoid checkSunnyNumber(int N) {\\n  if (isPerfectSquare(N + 1)) {\\n    cout << \\\"Yes\\n\\\";\\n  } else {\\n    cout << \\\"No\\n\\\";\\n  }\\n}\\nint main() {\\n  int N = 8;\\n  checkSunnyNumber(N);\\n  return 0;\\n}\\nPython: from math import *\\n \\ndef isPerfectSquare(x):\\n    sr = sqrt(x)\\n    return ((sr - floor(sr)) == 0)\\n \\ndef checkSunnyNumber(N):\\n    if (isPerfectSquare(N + 1)):\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n \\nif __name__ == '__main__':\\n    N = 8\\n    checkSunnyNumber(N)\\n\\n<end of code>\\n\\nC++: #include <bits/stdc++.h>\\nusing namespace std;\\nint countAPs(int S, int D) {\\n  S = S * 2;\\n  int answer = 0;\\n  for (int i = 1; i <= sqrt(S); i++) {\\n    if (S % i == 0) {\\n      if (((S / i) - D * i + D) % 2 == 0)\\n        answer++;\\n      if ((D * i - (S / i) + D) % 2 == 0)\\n        answer++;\\n    }\\n  }\\n  return answer;\\n}\\nint main() {\\n  int S = 12, D = 1;\\n  cout << countAPs(S, D);\\n  return 0;\\n}\\nPython:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 300,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Translate the following code from C++ to Python.\\n\\nC++: #include \\\"bits/stdc++.h\\\"\\nusing namespace std;\\nbool isPerfectSquare(long double x) {\\n  long double sr = sqrt(x);\\n  return ((sr - floor(sr)) == 0);\\n}\\nvoid checkSunnyNumber(int N) {\\n  if (isPerfectSquare(N + 1)) {\\n    cout << \\\"Yes\\n\\\";\\n  } else {\\n    cout << \\\"No\\n\\\";\\n  }\\n}\\nint main() {\\n  int N = 8;\\n  checkSunnyNumber(N);\\n  return 0;\\n}\\nPython: from math import *\\n \\ndef isPerfectSquare(x):\\n    sr = sqrt(x)\\n    return ((sr - floor(sr)) == 0)\\n \\ndef checkSunnyNumber(N):\\n    if (isPerfectSquare(N + 1)):\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n \\nif __name__ == '__main__':\\n    N = 8\\n    checkSunnyNumber(N)\\n\\n<end of code>\\n\\nC++: #include <bits/stdc++.h>\\nusing namespace std;\\nint countAPs(int S, int D) {\\n  S = S * 2;\\n  int answer = 0;\\n  for (int i = 1; i <= sqrt(S); i++) {\\n    if (S % i == 0) {\\n      if (((S / i) - D * i + D) % 2 == 0)\\n        answer++;\\n      if ((D * i - (S / i) + D) % 2 == 0)\\n        answer++;\\n    }\\n  }\\n  return answer;\\n}\\nint main() {\\n  int S = 12, D = 1;\\n  cout << countAPs(S, D);\\n  return 0;\\n}\\nPython:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 300,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:28:02 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=53357d50177c5333"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=53357d50177c5333"
								},
								{
									"key": "X-Instana-T",
									"value": "53357d50177c5333"
								},
								{
									"key": "X-Instana-S",
									"value": "345a09cb3556c109"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-000000000000000053357d50177c5333-345a09cb3556c109-01"
								},
								{
									"key": "Tracestate",
									"value": "in=53357d50177c5333;345a09cb3556c109"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "9109016baca363207afd43e1892c3cdb"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fca006ca2117dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"codellama/codellama-34b-instruct-hf\",\n    \"created_at\": \"2024-04-05T21:28:02.537Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" from math import *\\n \\ndef countAPs(S, D):\\n    S = S * 2\\n    answer = 0\\n    for i in range(1, int(sqrt(S)) + 1):\\n        if (S % i == 0):\\n            if (((S / i) - D * i + D) % 2 == 0):\\n                answer += 1\\n            if ((D * i - (S / i) + D) % 2 == 0):\\n                answer += 1\\n    return answer\\n \\nif __name__ == '__main__':\\n    S = 12\\n    D = 1\\n    print(countAPs(S, D))\\n\\n<end of code>\",\n            \"generated_token_count\": 167,\n            \"input_token_count\": 471,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Code Generation (ibm/granite-3b-code-instruct)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-3b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:47:19 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=4e11eee39f999bf3"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=4e11eee39f999bf3"
								},
								{
									"key": "X-Instana-T",
									"value": "4e11eee39f999bf3"
								},
								{
									"key": "X-Instana-S",
									"value": "10f714341d917990"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000004e11eee39f999bf3-10f714341d917990-01"
								},
								{
									"key": "Tracestate",
									"value": "in=4e11eee39f999bf3;10f714341d917990"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "f2658a85f169dca8c565cf4a223083de"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882adc1aac221567-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-3b-code-instruct\",\n    \"created_at\": \"2024-05-12T13:47:19.091Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" def primes(n):\\n    primes = []\\n    for i in range(2, n):\\n        is_prime = True\\n        for j in range(2, i):\\n            if i % j == 0:\\n                is_prime = False\\n                break\\n        if is_prime:\\n            primes.append(i)\\n    return primes\\n\\n<end of code>\",\n            \"generated_token_count\": 79,\n            \"input_token_count\": 120,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Code Generation (ibm/granite-8b-code-instruct)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-8b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-8b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:45:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=1c1b65ab2d984328"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=1c1b65ab2d984328"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000001c1b65ab2d984328-1859941aead47e5b-01"
								},
								{
									"key": "Tracestate",
									"value": "in=1c1b65ab2d984328;1859941aead47e5b"
								},
								{
									"key": "X-Instana-T",
									"value": "1c1b65ab2d984328"
								},
								{
									"key": "X-Instana-S",
									"value": "1859941aead47e5b"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "7a02229aba3a2e34b6384ce3987577a8"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882ad9db298e239e-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-8b-code-instruct\",\n    \"created_at\": \"2024-05-12T13:45:47.047Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" def primes(n):\\n    primes = []\\n    for num in range(2, n):\\n        for i in range(2, num):\\n            if (num % i) == 0:\\n                break\\n        else:\\n            primes.append(num)\\n    return primes\\n\\n<end of code>\",\n            \"generated_token_count\": 66,\n            \"input_token_count\": 120,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Code Generation (ibm/granite-20b-code-instruct)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:44:58 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=5dbd56ea76d57496"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=5dbd56ea76d57496"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000005dbd56ea76d57496-21c84413d3ddc499-01"
								},
								{
									"key": "Tracestate",
									"value": "in=5dbd56ea76d57496;21c84413d3ddc499"
								},
								{
									"key": "X-Instana-T",
									"value": "5dbd56ea76d57496"
								},
								{
									"key": "X-Instana-S",
									"value": "21c84413d3ddc499"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "44eeefef44bcead112615fd6e48a54f2"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882ad882fbeb239e-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-20b-code-instruct\",\n    \"created_at\": \"2024-05-12T13:44:58.222Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" def primes(n):\\n    primes = []\\n    for i in range(2, n):\\n        is_prime = True\\n        for j in range(2, i):\\n            if i % j == 0:\\n                is_prime = False\\n                break\\n        if is_prime:\\n            primes.append(i)\\n    return primes\\n\\n<end of code>\",\n            \"generated_token_count\": 79,\n            \"input_token_count\": 120,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Code Generation (ibm/granite-34b-code-instruct)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-34b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Using the directions below, generate Python code for the given task.\\n\\nInput: # Write a Python function that prints 'Hello World!' string 'n' times.\\nOutput: def print_n_times(n):\\n    for i in range(n):\\n        print(\\\"Hello World!\\\")\\n\\n<end of code>\\n\\nInput: # Write a Python function, which generates sequence of prime numbers.\\n# The function 'primes' will take the argument 'n', an int. It will return a list which contains all primes less than 'n'.\\nOutput:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 1000,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [\r\n            \"<end of code>\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-34b-code-instruct\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 13:42:49 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=137bda80533b4194"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=137bda80533b4194"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000137bda80533b4194-41920b2275f13aa9-01"
								},
								{
									"key": "Tracestate",
									"value": "in=137bda80533b4194;41920b2275f13aa9"
								},
								{
									"key": "X-Instana-T",
									"value": "137bda80533b4194"
								},
								{
									"key": "X-Instana-S",
									"value": "41920b2275f13aa9"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "6c749aaff9b1f27601b56127918c190e"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882ad57b8cab239e-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-34b-code-instruct\",\n    \"created_at\": \"2024-05-12T13:42:49.501Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" def primes(n):\\n    primes = []\\n    for i in range(2, n):\\n        is_prime = True\\n        for j in range(2, i):\\n            if i % j == 0:\\n                is_prime = False\\n                break\\n        if is_prime:\\n            primes.append(i)\\n    return primes\\n\\n<end of code>\",\n            \"generated_token_count\": 79,\n            \"input_token_count\": 120,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Embeddings",
			"item": [
				{
					"name": "Embeddings (ibm/slate-30m-english-rtrvr)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inputs\": [\r\n        \"Youth craves thrills while adulthood cherishes wisdom.\",\r\n        \"Youth seeks ambition while adulthood finds contentment.\",\r\n        \"Dreams chased in youth while goals pursued in adulthood.\"\r\n    ],\r\n    \"model_id\": \"ibm/slate-30m-english-rtrvr\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/embeddings?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"embeddings"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputs\": [\r\n        \"Youth craves thrills while adulthood cherishes wisdom.\",\r\n        \"Youth seeks ambition while adulthood finds contentment.\",\r\n        \"Dreams chased in youth while goals pursued in adulthood.\"\r\n    ],\r\n    \"model_id\": \"ibm/slate-30m-english-rtrvr\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/embeddings?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"embeddings"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 14:08:08 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=408b57e7be425b08"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=408b57e7be425b08"
								},
								{
									"key": "X-Instana-S",
									"value": "1235cd1a231c53bb"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000408b57e7be425b08-1235cd1a231c53bb-01"
								},
								{
									"key": "Tracestate",
									"value": "in=408b57e7be425b08;1235cd1a231c53bb"
								},
								{
									"key": "X-Instana-T",
									"value": "408b57e7be425b08"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "12195592e8712bd5bd4a5f55f4575903"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882afaa4798bfafc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/slate-30m-english-rtrvr\",\n    \"created_at\": \"2024-05-12T14:08:08.885Z\",\n    \"results\": [\n        {\n            \"embedding\": [\n                0.062476516,\n                -0.019661523,\n                0.1207745,\n                0.03095177,\n                0.04715946,\n                -0.034873378,\n                -0.007820305,\n                0.060147896,\n                -0.0012363737,\n                -0.0075649684,\n                0.03011503,\n                0.038966022,\n                0.0033891273,\n                0.0138444435,\n                -0.0622798,\n                0.09065,\n                0.0050692805,\n                -0.024997903,\n                0.043521248,\n                -0.0035510233,\n                0.004303961,\n                -0.09160771,\n                0.026619894,\n                -0.004414644,\n                -0.05814195,\n                0.010269746,\n                0.010046463,\n                -0.04995481,\n                -0.012228253,\n                -0.022456776,\n                0.025074737,\n                0.009229381,\n                0.004933237,\n                0.014686466,\n                0.0734741,\n                -0.028044978,\n                0.11117666,\n                0.029075077,\n                0.028216956,\n                0.013523671,\n                -0.0044904277,\n                0.010258918,\n                0.0139405485,\n                -0.0013634288,\n                0.01790829,\n                0.009292983,\n                0.094198994,\n                -0.020642998,\n                0.019729594,\n                -0.004563836,\n                0.025221072,\n                0.02510393,\n                -0.008952195,\n                0.04283988,\n                0.016950212,\n                0.037180457,\n                0.06727001,\n                -0.007979485,\n                0.06004529,\n                0.05328762,\n                0.071137436,\n                0.10613391,\n                0.06403824,\n                0.049933467,\n                0.049263675,\n                0.0101297675,\n                -0.07059211,\n                0.03171878,\n                0.06388575,\n                -0.019352335,\n                0.013364684,\n                0.0057693613,\n                -0.029760148,\n                0.03207273,\n                0.009363209,\n                0.026634527,\n                -0.14168927,\n                0.018168913,\n                0.030915344,\n                0.068432495,\n                0.058573596,\n                0.08682669,\n                0.023119712,\n                0.04427237,\n                0.11704063,\n                0.0050269724,\n                0.021310844,\n                -0.030797279,\n                0.00790478,\n                -0.01842938,\n                0.059901632,\n                0.023189444,\n                0.116281696,\n                0.014168127,\n                0.0017659995,\n                0.024955662,\n                -0.044723783,\n                0.01404737,\n                -0.36349553,\n                0.01172214,\n                0.06338292,\n                -0.0083782775,\n                -0.0036840981,\n                0.033189703,\n                0.00090229296,\n                0.05420959,\n                0.07204868,\n                -0.045908213,\n                0.053166557,\n                -0.0061531994,\n                0.02147287,\n                0.026008612,\n                0.010873533,\n                0.009459776,\n                -0.12513192,\n                -0.025881868,\n                0.00005836458,\n                0.038125385,\n                -0.037870403,\n                0.019965926,\n                0.009312775,\n                0.037604015,\n                -0.01806408,\n                -0.009360891,\n                0.0068261065,\n                0.018888643,\n                0.042568076,\n                0.05494611,\n                0.018383265,\n                -0.023737594,\n                0.024985056,\n                0.026693773,\n                -0.010538505,\n                -0.034133345,\n                0.041203436,\n                0.010106563,\n                -0.008776129,\n                0.012272268,\n                -0.0015036485,\n                -0.0013057002,\n                -0.13649818,\n                -0.079782076,\n                0.037473995,\n                0.061031967,\n                0.014736872,\n                0.032800503,\n                -0.0023838757,\n                -0.053559385,\n                0.14012879,\n                0.020243056,\n                -0.006433653,\n                0.02065961,\n                0.0060939887,\n                0.024051549,\n                0.055072393,\n                0.04467261,\n                0.03869453,\n                0.055342134,\n                0.030856602,\n                0.0040821545,\n                0.037157387,\n                0.010797087,\n                -0.01987041,\n                0.007214548,\n                0.076754875,\n                0.04753686,\n                0.030342547,\n                0.010592774,\n                -0.016541975,\n                0.015744505,\n                0.0054525863,\n                0.03296951,\n                0.051286105,\n                0.07956908,\n                -0.033715155,\n                0.0068405867,\n                -0.009528931,\n                0.15615702,\n                0.032734193,\n                0.0186188,\n                0.080134004,\n                0.088132255,\n                -0.050213587,\n                0.030011177,\n                0.0029678284,\n                0.017733349,\n                0.03583596,\n                0.0588376,\n                -0.006400145,\n                0.033232555,\n                -0.09290169,\n                0.025125174,\n                0.01655285,\n                0.012582812,\n                0.004221923,\n                0.022144375,\n                0.105606586,\n                -0.018148998,\n                0.025697263,\n                0.04068222,\n                0.036366176,\n                -0.015910946,\n                0.16291565,\n                -0.0036857647,\n                0.04057359,\n                0.047875803,\n                0.036627784,\n                0.00040305458,\n                0.0032524155,\n                0.024452807,\n                0.032092977,\n                -0.0004893278,\n                0.021469736,\n                0.02567074,\n                0.035964847,\n                0.008892236,\n                0.051268946,\n                0.069234006,\n                0.008640442,\n                -0.016503878,\n                0.012399509,\n                0.005668951,\n                -0.017990604,\n                -0.020150434,\n                -0.011452575,\n                -0.0017701514,\n                0.07595096,\n                0.059480388,\n                -0.013531092,\n                -0.002002176,\n                0.018880796,\n                0.025288988,\n                -0.18180771,\n                0.0015116716,\n                0.016144324,\n                0.027863853,\n                -0.006850732,\n                0.059124403,\n                0.024194928,\n                0.0052277646,\n                0.059590183,\n                0.012533218,\n                0.03360019,\n                0.04518233,\n                0.039271675,\n                -0.09126611,\n                0.04458792,\n                0.027482525,\n                0.0040005436,\n                0.011613357,\n                0.050684016,\n                0.052281383,\n                0.056441337,\n                0.07047998,\n                0.0023864452,\n                0.0040857503,\n                -0.008016791,\n                -0.01936439,\n                0.003126138,\n                0.04157166,\n                0.059735242,\n                0.0008297785,\n                -0.0032390512,\n                0.08386361,\n                0.027417194,\n                -0.016526613,\n                0.05654192,\n                0.03572626,\n                -0.011661032,\n                0.007680345,\n                0.0029752196,\n                0.07353852,\n                -0.014753396,\n                -0.026060134,\n                0.028552257,\n                0.031923585,\n                0.06499797,\n                0.05380998,\n                0.027618244,\n                0.014802888,\n                -0.001195602,\n                0.11517863,\n                0.035408206,\n                -0.17828922,\n                0.048086066,\n                0.012389723,\n                -0.025248656,\n                0.016797647,\n                -0.012556237,\n                0.026209997,\n                0.0126538435,\n                0.007995786,\n                -0.032332335,\n                -0.028387863,\n                -0.09108877,\n                0.017084898,\n                -0.00071512314,\n                -0.027399547,\n                0.014856379,\n                0.023646493,\n                -0.000068975874,\n                -0.014049607,\n                0.008325616,\n                -0.06913882,\n                0.011148111,\n                0.055522658,\n                0.05694396,\n                -0.004208143,\n                0.032448724,\n                0.0116974,\n                0.008524154,\n                0.02863574,\n                -0.007335918,\n                -0.054215778,\n                0.029485777,\n                -0.14385474,\n                0.06195291,\n                0.0067722104,\n                -0.020095322,\n                0.0025472553,\n                0.0858923,\n                0.002958111,\n                -0.043737695,\n                0.046601575,\n                0.0077202995,\n                0.074399166,\n                0.010399117,\n                0.026901029,\n                -0.07473931,\n                0.10969154,\n                0.017882893,\n                0.034738734,\n                0.022248147,\n                -0.08853818,\n                0.17538454,\n                -0.012355304,\n                0.03870683,\n                0.0017032287,\n                -0.009084073,\n                0.031954523,\n                0.063262776,\n                -0.023959992,\n                0.0090148905,\n                -0.015744042,\n                0.040936008,\n                0.020497927,\n                0.0066463514,\n                0.016314154,\n                0.020426467,\n                0.028625723,\n                0.0077110184,\n                -0.003063734,\n                0.011495404,\n                -0.054430783,\n                -0.08766664,\n                0.02208468,\n                0.06629809,\n                -0.015779715,\n                0.048111524,\n                -0.06382039,\n                0.029951662,\n                0.050248094,\n                0.02705514,\n                0.013924726,\n                0.0061844457,\n                -0.0111532975,\n                0.09665563,\n                0.0015888877,\n                0.028306242,\n                0.047344197,\n                0.0132553475,\n                -0.11088204,\n                0.057834998,\n                0.015094293,\n                -0.061358366,\n                0.018108735,\n                0.041641284,\n                0.08605099,\n                0.023174496,\n                0.031472832,\n                0.036942046,\n                0.013684733,\n                -0.017065499,\n                0.057699084\n            ]\n        },\n        {\n            \"embedding\": [\n                0.019440504,\n                -0.022687975,\n                0.08694273,\n                0.0044968477,\n                0.0733359,\n                -0.032874223,\n                -0.026280876,\n                0.08247009,\n                0.002024545,\n                -0.0025630747,\n                0.026983185,\n                0.0017964499,\n                0.025393901,\n                0.011072344,\n                -0.043712575,\n                0.109535806,\n                0.020003494,\n                -0.032802794,\n                0.042849194,\n                -0.0085094515,\n                -0.0012273914,\n                -0.030505985,\n                -0.002465754,\n                -0.0049725957,\n                -0.07956574,\n                -0.013243161,\n                0.004672395,\n                -0.055313647,\n                -0.008898566,\n                0.01168575,\n                0.016669989,\n                0.04371118,\n                0.010543732,\n                0.036838107,\n                0.060601816,\n                -0.058927864,\n                0.092944086,\n                0.0012996675,\n                0.02009002,\n                0.05348107,\n                0.011611649,\n                0.027290761,\n                -0.031384666,\n                -0.0033871357,\n                0.04162792,\n                0.05181926,\n                0.1253423,\n                -0.031479012,\n                0.007700612,\n                0.04529305,\n                0.046669807,\n                0.03666655,\n                -0.016998136,\n                0.02037357,\n                -0.0060149836,\n                -0.007263077,\n                0.028425666,\n                -0.0064282846,\n                0.046436634,\n                0.05016353,\n                0.0753232,\n                0.10867372,\n                0.061593384,\n                0.04983801,\n                0.06385508,\n                -0.01428165,\n                -0.04025393,\n                0.022115836,\n                0.054048955,\n                -0.031745136,\n                0.008760723,\n                -0.036757175,\n                -0.039725818,\n                0.052541383,\n                -0.04358871,\n                -0.019394,\n                -0.06784018,\n                0.011726581,\n                0.034933615,\n                0.041990075,\n                0.0910969,\n                0.056908224,\n                0.019600535,\n                0.036819898,\n                0.10080007,\n                0.013307217,\n                0.013362292,\n                -0.018773928,\n                0.026444802,\n                -0.015040512,\n                0.06600771,\n                0.036644876,\n                0.09098141,\n                -0.00028927016,\n                0.020383263,\n                0.03624706,\n                0.008269434,\n                0.0054284395,\n                -0.35037717,\n                -0.0066197934,\n                0.027251158,\n                -0.016453827,\n                0.010688955,\n                0.04254562,\n                -0.011361186,\n                0.077334456,\n                0.12678957,\n                -0.059671372,\n                0.025742175,\n                -0.019517433,\n                0.049453884,\n                0.08748972,\n                -0.012376999,\n                -0.013366201,\n                -0.040407117,\n                0.026609756,\n                0.0037148437,\n                -0.008210652,\n                0.017854301,\n                0.015687052,\n                0.03666913,\n                0.078802325,\n                -0.033035975,\n                -0.024707947,\n                0.018841658,\n                0.04151148,\n                0.05656032,\n                0.039213546,\n                0.030800942,\n                -0.021644086,\n                0.023169763,\n                0.031540845,\n                0.02988589,\n                -0.036210172,\n                0.036938526,\n                0.0072580236,\n                0.0046924325,\n                0.02283637,\n                0.054560598,\n                0.0022616023,\n                -0.14059848,\n                -0.07552793,\n                0.000911319,\n                0.10988115,\n                0.024781706,\n                0.021698754,\n                -0.022156797,\n                -0.02779091,\n                0.08783736,\n                0.0151599245,\n                -0.03938182,\n                0.02919405,\n                0.0040342608,\n                0.027533516,\n                0.055612937,\n                0.056124605,\n                0.042658955,\n                0.07160151,\n                0.014325364,\n                0.021856254,\n                0.02045315,\n                0.060240626,\n                -0.027952358,\n                -0.003332521,\n                0.091619864,\n                0.036868595,\n                0.01024724,\n                -0.0011762504,\n                -0.02397582,\n                0.021472218,\n                0.032152407,\n                0.041769527,\n                0.06652596,\n                0.039609186,\n                -0.03695936,\n                -0.009468228,\n                -0.036856804,\n                0.1572447,\n                0.054768965,\n                0.011798481,\n                0.083378755,\n                0.066679955,\n                -0.023644762,\n                0.02017028,\n                -0.0037701447,\n                0.020625627,\n                0.05403674,\n                0.109145395,\n                -0.03434965,\n                0.043757018,\n                -0.037058923,\n                0.04768798,\n                0.042396575,\n                0.0019752516,\n                -0.037959456,\n                0.04355581,\n                0.09732753,\n                -0.009510272,\n                0.040712353,\n                -0.020377366,\n                0.030633617,\n                0.003184649,\n                0.18331905,\n                -0.026962804,\n                -0.027594998,\n                0.036755063,\n                0.043369748,\n                0.008827731,\n                -0.0021604423,\n                0.025697852,\n                0.026290981,\n                -0.006452478,\n                0.028345756,\n                0.042613395,\n                0.014235265,\n                0.006176123,\n                0.03022189,\n                0.049157046,\n                -0.012682833,\n                -0.02508565,\n                0.063652135,\n                -0.004354733,\n                0.03211053,\n                0.0022045986,\n                -0.00955913,\n                -0.029894885,\n                0.04039156,\n                0.05182705,\n                -0.026769763,\n                -0.017256467,\n                0.031971812,\n                0.012818597,\n                -0.20967624,\n                0.009666257,\n                0.01857894,\n                0.056924853,\n                0.0063355826,\n                0.083963856,\n                0.020712344,\n                0.007835954,\n                0.042449333,\n                0.014949341,\n                0.015829505,\n                0.06774265,\n                0.046236902,\n                -0.039799053,\n                0.03228141,\n                0.056394115,\n                0.006167505,\n                0.018998532,\n                0.052268226,\n                0.025602091,\n                -0.004813939,\n                0.058857948,\n                0.0054448065,\n                -0.008034574,\n                0.005865857,\n                -0.0053853984,\n                0.010039909,\n                0.01144295,\n                0.107783936,\n                -0.00523245,\n                0.0033411277,\n                0.043086637,\n                0.022338198,\n                -0.015401351,\n                0.045817837,\n                0.065034844,\n                0.010641488,\n                -0.0008776385,\n                -0.0088849645,\n                0.044029552,\n                -0.044853058,\n                -0.026267633,\n                0.037687816,\n                0.0462002,\n                0.06648271,\n                0.056719366,\n                0.0007866634,\n                0.027209602,\n                0.010592833,\n                0.07841954,\n                0.02134692,\n                -0.14647019,\n                0.027986236,\n                0.012655168,\n                0.00865628,\n                0.006429386,\n                0.02583874,\n                0.026931802,\n                0.018445428,\n                0.00053190807,\n                -0.009667116,\n                -0.088529825,\n                -0.028180491,\n                0.010638672,\n                0.0000061674227,\n                -0.03705159,\n                0.044452615,\n                0.033907928,\n                0.0019317116,\n                -0.016813675,\n                -0.027738221,\n                -0.09647426,\n                0.015698867,\n                0.06292328,\n                0.05469085,\n                -0.011114949,\n                0.007567877,\n                0.010327134,\n                -0.04165695,\n                0.047357447,\n                0.011838343,\n                -0.02824317,\n                0.052173123,\n                -0.11272609,\n                0.064045995,\n                0.009488686,\n                -0.0284049,\n                0.018620614,\n                0.038142726,\n                0.023578329,\n                -0.057488974,\n                0.10001878,\n                -0.010782113,\n                0.09325109,\n                -0.027286446,\n                0.02017596,\n                -0.08660732,\n                0.060078993,\n                0.00031865347,\n                0.03618071,\n                0.02960407,\n                -0.12369049,\n                0.18332152,\n                -0.007988558,\n                0.04108784,\n                -0.04176702,\n                -0.018007731,\n                0.013123391,\n                0.078288026,\n                0.0044440473,\n                0.02835243,\n                0.031213278,\n                0.02292977,\n                0.06367241,\n                0.007834338,\n                0.035296593,\n                -0.023224294,\n                0.07219663,\n                0.04841343,\n                -0.001740714,\n                0.0054502245,\n                -0.021326177,\n                -0.07750539,\n                0.021884363,\n                0.027306447,\n                -0.029508155,\n                0.01762317,\n                -0.0010539403,\n                0.04993513,\n                0.041161627,\n                0.0010906019,\n                -0.008939898,\n                0.007373787,\n                0.009241908,\n                0.07596907,\n                0.015769435,\n                0.01569205,\n                0.025644397,\n                0.012138905,\n                -0.159793,\n                0.052377477,\n                0.03073324,\n                -0.013242028,\n                -0.0049889837,\n                0.0074453014,\n                0.06557098,\n                0.032519665,\n                -0.0029865662,\n                0.01668734,\n                -0.006136234,\n                -0.03713792,\n                0.052482363\n            ]\n        },\n        {\n            \"embedding\": [\n                0.040478658,\n                -0.00887357,\n                0.019971916,\n                0.02328467,\n                0.017670024,\n                -0.012516316,\n                0.0028519738,\n                0.059881397,\n                0.038740907,\n                0.0073027583,\n                0.009030105,\n                0.01005221,\n                0.01229331,\n                0.0027588469,\n                0.010001393,\n                0.05500939,\n                0.009385298,\n                -0.01955218,\n                0.04605879,\n                0.014225282,\n                -0.0024728621,\n                -0.08149763,\n                0.031385347,\n                0.014077304,\n                -0.053350452,\n                -0.019283772,\n                -0.008223268,\n                -0.03550224,\n                0.059256162,\n                0.048281733,\n                0.017548807,\n                0.011166418,\n                -0.008811259,\n                0.07495168,\n                0.063562974,\n                0.045741014,\n                0.066655554,\n                0.007461461,\n                0.07300718,\n                -0.031869136,\n                0.016906634,\n                0.044532023,\n                -0.005495444,\n                0.00792597,\n                -0.032893654,\n                0.03385504,\n                0.08806952,\n                0.022544459,\n                0.019711751,\n                0.028486582,\n                -0.015502371,\n                0.03272507,\n                -0.08250167,\n                0.031786136,\n                -0.016345704,\n                0.04978972,\n                0.09484062,\n                -0.011675575,\n                0.0385173,\n                0.03713719,\n                0.08278722,\n                0.10050576,\n                0.032577354,\n                0.041508384,\n                0.029356014,\n                0.015675057,\n                -0.05407316,\n                0.021178303,\n                0.07895797,\n                0.0011020921,\n                0.015547177,\n                -0.06506963,\n                0.032814607,\n                0.02754118,\n                -0.05513284,\n                -0.0112334695,\n                -0.043101687,\n                -0.015341144,\n                0.04300065,\n                0.035330698,\n                0.062903605,\n                0.11403829,\n                0.015010222,\n                0.0386963,\n                0.114540584,\n                -0.028499415,\n                0.03482542,\n                -0.0041338867,\n                -0.007018711,\n                0.03557274,\n                0.007016819,\n                0.07567748,\n                0.06776885,\n                -0.02691084,\n                0.0030899034,\n                0.040251933,\n                0.0344346,\n                0.02338713,\n                -0.31401372,\n                -0.0026102266,\n                -0.024423795,\n                -0.014646145,\n                -0.038933434,\n                0.05472922,\n                -0.026752748,\n                0.08078797,\n                0.12015979,\n                -0.017651588,\n                -0.010637617,\n                -0.038846828,\n                0.06725969,\n                0.060884714,\n                0.0009926311,\n                -0.05126159,\n                -0.08765191,\n                0.011928864,\n                -0.0072377557,\n                0.07916796,\n                0.057874437,\n                0.037387025,\n                0.056108627,\n                0.13007137,\n                -0.005048472,\n                -0.07410456,\n                0.053557724,\n                0.030126555,\n                0.048393473,\n                0.060381826,\n                -0.016835732,\n                -0.0029519435,\n                0.024875546,\n                -0.019061858,\n                0.014313586,\n                -0.043227572,\n                0.03644986,\n                0.033441536,\n                0.019017102,\n                0.014343097,\n                -0.003925283,\n                0.0069009922,\n                -0.14919378,\n                -0.042945113,\n                0.040826175,\n                0.12513424,\n                -0.011622235,\n                0.03318502,\n                -0.05428419,\n                -0.040104233,\n                0.124669395,\n                0.0029148133,\n                0.016248772,\n                -0.01604945,\n                -0.016198298,\n                0.02195741,\n                0.050273694,\n                0.11924613,\n                0.04645622,\n                0.058551252,\n                -0.00037663223,\n                0.0017471099,\n                0.023577992,\n                0.052297108,\n                -0.018911092,\n                -0.0062498497,\n                0.16179739,\n                0.013257485,\n                0.026207384,\n                -0.0040699607,\n                -0.01515645,\n                -0.019557612,\n                0.01418173,\n                0.060451716,\n                0.053669028,\n                -0.008788894,\n                -0.040221646,\n                -0.009607728,\n                -0.0048001194,\n                0.14596802,\n                0.05315233,\n                0.0020796452,\n                0.057573896,\n                0.020508137,\n                0.016737696,\n                -0.013839501,\n                -0.033412978,\n                0.016683616,\n                0.02762135,\n                0.09937375,\n                -0.057105076,\n                0.053114295,\n                -0.10725191,\n                0.04207991,\n                0.010530755,\n                0.042681426,\n                0.02845668,\n                0.039334238,\n                0.1094918,\n                0.024352571,\n                0.02655818,\n                0.057510894,\n                0.01864962,\n                -0.003900839,\n                0.17393655,\n                0.0056181215,\n                0.06049371,\n                0.010795226,\n                0.0560126,\n                0.039708715,\n                0.008932575,\n                0.05482496,\n                0.02873426,\n                0.052542657,\n                0.03482861,\n                0.006364734,\n                0.024426334,\n                -0.017286094,\n                0.0033900472,\n                0.026977252,\n                -0.003828801,\n                0.0021392487,\n                0.06732801,\n                -0.017646506,\n                0.06536407,\n                0.013536555,\n                0.02094068,\n                -0.03391994,\n                0.009527147,\n                0.070585415,\n                -0.023398576,\n                -0.0054214713,\n                0.03295218,\n                0.0008171035,\n                -0.16955563,\n                0.048310332,\n                -0.0060570533,\n                0.045698266,\n                -0.020876018,\n                0.048741575,\n                0.048842568,\n                -0.003150175,\n                0.082436256,\n                -0.014393696,\n                0.03189002,\n                0.054430727,\n                0.060534835,\n                0.028101072,\n                0.022715276,\n                0.07204846,\n                0.0015175118,\n                0.00017862786,\n                0.029113062,\n                0.048028845,\n                0.05817605,\n                0.06298443,\n                0.0019762765,\n                0.0121653,\n                0.03709537,\n                0.035243265,\n                0.00075313397,\n                0.03543405,\n                0.067751154,\n                0.053649038,\n                0.017092956,\n                -0.016289422,\n                -0.0016232163,\n                0.040522385,\n                0.036450934,\n                0.0340481,\n                0.0142642725,\n                0.0068331636,\n                -0.025643002,\n                0.06517676,\n                -0.04515594,\n                -0.06517642,\n                0.043815885,\n                -0.023193642,\n                0.09862029,\n                0.04437585,\n                0.00078481145,\n                0.0488821,\n                0.012866018,\n                0.019599373,\n                0.039151233,\n                -0.10763169,\n                0.103243165,\n                -0.016943345,\n                0.033323817,\n                -0.011211219,\n                0.057781953,\n                0.048819177,\n                0.016265877,\n                0.008468608,\n                -0.0051984526,\n                -0.099724546,\n                -0.0011181388,\n                0.0047093946,\n                0.017275572,\n                -0.029279444,\n                0.005437813,\n                0.022418983,\n                0.022602724,\n                -0.056379203,\n                -0.047431268,\n                -0.074164055,\n                0.027677322,\n                0.0379248,\n                0.033985592,\n                -0.03986793,\n                0.017971247,\n                0.047433022,\n                -0.025816659,\n                0.03252272,\n                0.03572875,\n                -0.052464858,\n                -0.047553193,\n                -0.1469492,\n                -0.00038792915,\n                -0.018837,\n                -0.031379662,\n                0.004995698,\n                0.047906816,\n                0.037818424,\n                -0.080475025,\n                0.0025051178,\n                0.05430273,\n                -0.010466157,\n                0.01374286,\n                0.016970232,\n                -0.034252323,\n                0.1064073,\n                -0.002218923,\n                0.02562897,\n                0.006519301,\n                -0.06521627,\n                0.19403078,\n                -0.019986022,\n                -0.005940965,\n                -0.010638686,\n                -0.014851176,\n                0.016839668,\n                0.029002689,\n                0.03337941,\n                0.021195175,\n                0.029200187,\n                0.034816723,\n                0.023474442,\n                0.00027910847,\n                0.012579067,\n                0.031920962,\n                0.0082065,\n                0.047416437,\n                0.057509363,\n                0.02463495,\n                -0.02036879,\n                -0.08185212,\n                0.016994506,\n                0.017352855,\n                -0.022890367,\n                -0.03052094,\n                -0.0010977489,\n                0.058973357,\n                -0.020069808,\n                -0.08438791,\n                -0.048245993,\n                -0.036443163,\n                0.015334498,\n                0.03999763,\n                0.05178428,\n                -0.0016956148,\n                0.061015256,\n                0.059339605,\n                -0.07246639,\n                0.04361609,\n                0.0108698495,\n                -0.048606463,\n                -0.0008863547,\n                0.04281672,\n                -0.015336959,\n                0.026715083,\n                -0.019831043,\n                -0.0049903737,\n                -0.015099488,\n                -0.0055345567,\n                0.020095041\n            ]\n        }\n    ],\n    \"input_token_count\": 39\n}"
						}
					]
				},
				{
					"name": "Embeddings (ibm/slate-125m-english-rtrvr)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"inputs\": [\r\n        \"Youth craves thrills while adulthood cherishes wisdom.\",\r\n        \"Youth seeks ambition while adulthood finds contentment.\",\r\n        \"Dreams chased in youth while goals pursued in adulthood.\"\r\n    ],\r\n    \"model_id\": \"ibm/slate-125m-english-rtrvr\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/embeddings?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"embeddings"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"inputs\": [\r\n        \"Youth craves thrills while adulthood cherishes wisdom.\",\r\n        \"Youth seeks ambition while adulthood finds contentment.\",\r\n        \"Dreams chased in youth while goals pursued in adulthood.\"\r\n    ],\r\n    \"model_id\": \"ibm/slate-125m-english-rtrvr\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/embeddings?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"embeddings"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 12 May 2024 14:06:16 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=97bf4fff4296a405"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=97bf4fff4296a405"
								},
								{
									"key": "X-Instana-T",
									"value": "97bf4fff4296a405"
								},
								{
									"key": "X-Instana-S",
									"value": "735988f7e52a5df7"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-000000000000000097bf4fff4296a405-735988f7e52a5df7-01"
								},
								{
									"key": "Tracestate",
									"value": "in=97bf4fff4296a405;735988f7e52a5df7"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "246a36f60d5e6e9737bf558654fdc2f5"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "882af7e75d19fafc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/slate-125m-english-rtrvr\",\n    \"created_at\": \"2024-05-12T14:06:16.684Z\",\n    \"results\": [\n        {\n            \"embedding\": [\n                -0.024644956,\n                0.063319616,\n                -0.020406976,\n                -0.027595054,\n                -0.042884313,\n                -0.049777497,\n                0.02520859,\n                -0.024732515,\n                -0.0072832755,\n                0.03143068,\n                -0.011475773,\n                0.015606917,\n                0.04598271,\n                -0.016908325,\n                0.0054292763,\n                0.0037792546,\n                -0.009820908,\n                0.029367778,\n                0.005935504,\n                -0.017016359,\n                0.011219981,\n                0.022488097,\n                0.008371473,\n                -0.027221512,\n                0.037049666,\n                0.004351277,\n                0.023363212,\n                -0.0025656386,\n                0.011443767,\n                -0.0140265105,\n                -0.001140182,\n                0.04794992,\n                0.017636722,\n                -0.06769977,\n                0.050866935,\n                0.008931916,\n                0.036846418,\n                0.015528637,\n                0.028127853,\n                -0.012528152,\n                0.009472543,\n                -0.024502337,\n                -0.0122654885,\n                -0.00084161223,\n                -0.066104524,\n                -0.023985008,\n                0.005704076,\n                0.0171437,\n                -0.03324598,\n                0.048261005,\n                0.02703229,\n                0.05807053,\n                -0.04107394,\n                -0.042712342,\n                0.014722818,\n                -0.026176171,\n                -0.0043938793,\n                0.015588247,\n                0.023113118,\n                -0.031572264,\n                0.040943645,\n                0.06259326,\n                -0.05579173,\n                0.006461754,\n                0.04069359,\n                -0.015515984,\n                -0.012993771,\n                -0.012141312,\n                -0.11461432,\n                -0.0094655035,\n                0.0009656614,\n                -0.0076688766,\n                -0.030905971,\n                -0.024517504,\n                0.021807352,\n                -0.004961677,\n                -0.06858771,\n                -0.0052890973,\n                -0.035713226,\n                0.0074196705,\n                0.05831634,\n                -0.011264799,\n                -0.0073088612,\n                0.009944433,\n                0.0037649146,\n                -0.010056148,\n                -0.018331727,\n                -0.0002247614,\n                0.009640616,\n                -0.00045501383,\n                0.006511263,\n                -0.014684114,\n                0.039313633,\n                -0.011408384,\n                0.022673218,\n                0.011732326,\n                0.01239772,\n                -0.017717704,\n                0.011316521,\n                0.01068281,\n                0.05094546,\n                -0.047547963,\n                0.034487505,\n                0.008407377,\n                0.030891156,\n                0.036009748,\n                0.00394357,\n                0.027732953,\n                0.045944702,\n                -0.018861335,\n                0.03161162,\n                -0.035632383,\n                -0.07328371,\n                0.029387666,\n                0.0009503374,\n                0.047778223,\n                0.04205227,\n                0.025872316,\n                0.04160515,\n                -0.027969437,\n                -0.0060802517,\n                -0.0016303633,\n                0.008115761,\n                -0.041876197,\n                -0.008195398,\n                -0.007958225,\n                0.015463693,\n                -0.008558171,\n                -0.020041825,\n                -0.024185285,\n                0.015724026,\n                -0.030802773,\n                0.022823716,\n                -0.0049958844,\n                -0.0031035102,\n                -0.009212146,\n                0.02350728,\n                0.09750842,\n                -0.027663548,\n                -0.01219532,\n                -0.004542514,\n                -0.06450432,\n                -0.02314577,\n                -0.028024655,\n                -0.03541832,\n                -0.05991598,\n                0.004800772,\n                0.006445414,\n                -0.06969105,\n                0.007680964,\n                -0.029046427,\n                -0.0015326429,\n                -0.001424432,\n                0.0038084413,\n                -0.023478592,\n                0.0087668765,\n                0.00011560486,\n                -0.042734943,\n                0.05474325,\n                0.0146379275,\n                0.014986927,\n                -0.02133735,\n                -0.048922714,\n                -0.02008248,\n                0.030897388,\n                -0.017531719,\n                -0.05545773,\n                -0.024423098,\n                -0.027705817,\n                -0.05061201,\n                0.012721164,\n                -0.052999724,\n                -0.037694395,\n                0.03498551,\n                -0.021372225,\n                -0.01333298,\n                -0.03958528,\n                -0.08189848,\n                0.03001971,\n                0.019607384,\n                0.019228997,\n                -0.016884644,\n                -0.0072899857,\n                -0.013903637,\n                0.04389518,\n                -0.010487064,\n                -0.012878522,\n                0.00393379,\n                -0.000091733054,\n                -0.03463712,\n                -0.04997457,\n                0.014189965,\n                0.027277635,\n                -0.036633607,\n                0.038941562,\n                -0.02764565,\n                0.06764429,\n                0.06988448,\n                0.045274388,\n                0.008630893,\n                0.013366069,\n                0.0010923956,\n                -0.012463494,\n                0.009244283,\n                -0.0060231932,\n                0.0113119595,\n                -0.0061966167,\n                0.010210548,\n                -0.0048119654,\n                -0.04304812,\n                -0.010088994,\n                0.012642233,\n                -0.04634163,\n                -0.28652528,\n                0.045196395,\n                0.032399125,\n                -0.16362412,\n                -0.010661485,\n                -0.0046574227,\n                0.030759312,\n                0.007520547,\n                0.047409695,\n                0.028025188,\n                -0.044189904,\n                0.031474184,\n                -0.050877616,\n                0.022907097,\n                0.003953328,\n                -0.064938195,\n                -0.017270293,\n                0.0068397964,\n                -0.033360578,\n                -0.06610473,\n                0.07124061,\n                0.0050751255,\n                -0.042006258,\n                0.017385354,\n                0.018653566,\n                -0.055921562,\n                0.017037516,\n                -0.021351248,\n                -0.037828997,\n                -0.0081197545,\n                0.05912097,\n                0.03778295,\n                -0.02925514,\n                0.0040368955,\n                0.010389384,\n                0.004086831,\n                -0.02047324,\n                0.026964879,\n                -0.003953442,\n                -0.21048935,\n                0.002267297,\n                0.02184833,\n                -0.009744264,\n                0.02142819,\n                0.029532773,\n                -0.0433914,\n                0.05278984,\n                0.048838224,\n                -0.018473458,\n                -0.011144693,\n                0.055419665,\n                -0.042811718,\n                0.036841355,\n                -0.0028271794,\n                0.010617309,\n                0.011994525,\n                -0.04251568,\n                0.008704693,\n                0.012440361,\n                0.0088732615,\n                0.007276155,\n                0.02546808,\n                0.031026345,\n                -0.017901769,\n                0.010315807,\n                -0.01314499,\n                -0.004224587,\n                -0.037667897,\n                0.060286704,\n                0.0016136668,\n                -0.017067622,\n                -0.0081148455,\n                0.022978187,\n                -0.0531675,\n                -0.03447522,\n                -0.043946054,\n                0.015153249,\n                -0.022256406,\n                0.0027888638,\n                0.055723723,\n                0.0025148224,\n                0.039861042,\n                0.04869991,\n                -0.035412148,\n                -0.01097221,\n                0.019744625,\n                -0.024022954,\n                0.026560377,\n                -0.005647175,\n                0.055728845,\n                -0.047938164,\n                0.020506386,\n                -0.028263742,\n                0.0470242,\n                0.024774384,\n                0.03618125,\n                -0.023677481,\n                -0.04455725,\n                -0.010149121,\n                -0.04508126,\n                -0.031673413,\n                -0.012064476,\n                -0.047301594,\n                0.007156221,\n                -0.04121536,\n                0.03607007,\n                0.0428157,\n                0.00383547,\n                -0.018933019,\n                0.033455946,\n                0.026523355,\n                -0.0037254402,\n                -0.01578868,\n                0.009023961,\n                0.033792883,\n                -0.0159916,\n                0.027884861,\n                -0.07771119,\n                -0.045441,\n                0.010656027,\n                0.030678427,\n                0.012267792,\n                -0.0023020685,\n                -0.020668557,\n                -0.020557981,\n                -0.06035152,\n                0.04913545,\n                -0.015045298,\n                0.0634861,\n                -0.023969272,\n                0.071942784,\n                -0.0036333597,\n                0.0059113656,\n                -0.01646182,\n                -0.036564484,\n                0.0035423324,\n                -0.016189046,\n                -0.029056896,\n                0.0232789,\n                -0.011468058,\n                0.010628114,\n                -0.0043557733,\n                0.01278375,\n                0.0668136,\n                0.0514692,\n                0.0381941,\n                0.03433025,\n                0.033160027,\n                0.050039258,\n                -0.021990415,\n                -0.0069878413,\n                0.05729088,\n                0.014681354,\n                -0.02456213,\n                -0.012345525,\n                0.05651562,\n                -0.0013914617,\n                -0.041876458,\n                -0.013840496,\n                -0.013229405,\n                0.010004979,\n                0.0016747456,\n                -0.02796057,\n                -0.010707692,\n                0.020613696,\n                -0.027350944,\n                -0.042726643,\n                0.005249328,\n                0.029789284,\n                0.004584982,\n                -0.008366744,\n                -0.02727094,\n                -0.029381666,\n                0.077200375,\n                -0.053658884,\n                -0.015874008,\n                0.06857002,\n                0.006842035,\n                -0.0021633222,\n                0.0157885,\n                0.029197965,\n                0.053093135,\n                -0.017001744,\n                0.050254002,\n                0.083174035,\n                -0.02132172,\n                -0.06660581,\n                0.035088655,\n                -0.026620105,\n                -0.006458864,\n                0.020861903,\n                -0.0009985807,\n                0.09372379,\n                -0.08038078,\n                -0.009727191,\n                0.031491235,\n                -0.0077840197,\n                -0.03892848,\n                -0.019073337,\n                0.029956944,\n                -0.008168359,\n                0.029829592,\n                0.0029072773,\n                0.019467833,\n                0.022644686,\n                -0.037888605,\n                0.015326758,\n                -0.06776102,\n                -0.06892779,\n                0.03185392,\n                -0.039797243,\n                0.20103247,\n                0.035762195,\n                -0.01896751,\n                -0.01564825,\n                -0.028803904,\n                0.0059190355,\n                -0.03783313,\n                -0.055274203,\n                0.0036696873,\n                -0.034190085,\n                0.07327008,\n                -0.060134307,\n                -0.022842009,\n                0.01705217,\n                0.007620519,\n                -0.053256545,\n                -0.038842753,\n                -0.055677276,\n                -0.06779472,\n                -0.004425443,\n                -0.031004397,\n                0.045272525,\n                -0.027261307,\n                -0.036336437,\n                -0.033336148,\n                -0.022968018,\n                0.026425153,\n                0.0036731304,\n                -0.043750856,\n                -0.0077708215,\n                -0.03484125,\n                0.05212085,\n                0.016132396,\n                -0.014412167,\n                0.011668997,\n                -0.03175776,\n                0.017805386,\n                -0.055931006,\n                0.0061279465,\n                0.014790153,\n                0.007856262,\n                0.009754787,\n                0.009623797,\n                0.004488604,\n                -0.02135531,\n                -0.060030106,\n                -0.00035207445,\n                0.08039739,\n                0.035072412,\n                0.049485665,\n                -0.013384549,\n                -0.013634388,\n                -0.01986953,\n                -0.04020721,\n                -0.0052306456,\n                -0.052328646,\n                -0.013042625,\n                0.009973755,\n                0.052978396,\n                -0.026006097,\n                0.0033749198,\n                0.04959782,\n                -0.020045798,\n                -0.004092208,\n                -0.0042188535,\n                -0.05353474,\n                -0.020811522,\n                0.0095056165,\n                -0.031976357,\n                -0.016014786,\n                -0.0069093546,\n                -0.0036342174,\n                0.0021506767,\n                -0.04762341,\n                -0.021582961,\n                0.009099364,\n                0.003944831,\n                0.04929929,\n                0.07156458,\n                0.022221867,\n                -0.015632037,\n                0.022504598,\n                -0.026943928,\n                0.033558875,\n                -0.03959016,\n                -0.042007506,\n                -0.015869437,\n                0.054876685,\n                0.03672929,\n                0.06184934,\n                -0.005996088,\n                -0.010916329,\n                -0.031422302,\n                0.0077615627,\n                -0.00020088497,\n                -0.037927605,\n                -0.0055556246,\n                -0.03324625,\n                0.021315819,\n                -0.029861862,\n                -0.0040244805,\n                0.018422667,\n                -0.018255394,\n                -0.021784391,\n                0.0063999635,\n                -0.044083714,\n                -0.005320773,\n                -0.013299716,\n                -0.030425332,\n                0.06938224,\n                -0.0035741827,\n                0.05629069,\n                -0.027616542,\n                0.035330344,\n                -0.021178935,\n                0.009424733,\n                -0.024050683,\n                0.0074620578,\n                0.0009377259,\n                -0.055924747,\n                -0.02314052,\n                0.036386915,\n                0.036050674,\n                -0.040458027,\n                -0.038817614,\n                0.013930974,\n                -0.022888055,\n                0.0147066,\n                0.0048052203,\n                0.030243278,\n                -0.046067964,\n                -0.022074495,\n                -0.025932265,\n                0.0005219767,\n                0.005854077,\n                -0.014619605,\n                0.021682838,\n                0.009770803,\n                -0.032110292,\n                -0.009395574,\n                -0.021971485,\n                0.047750704,\n                -0.004318024,\n                -0.059232954,\n                0.0028057527,\n                -0.014553329,\n                0.01746051,\n                -0.008995991,\n                0.03273551,\n                0.0017548884,\n                -0.009332566,\n                0.0055721058,\n                -0.026840867,\n                0.039253395,\n                0.0017975451,\n                -0.0092973625,\n                -0.01540054,\n                0.041789066,\n                -0.042716708,\n                0.080744974,\n                0.014747649,\n                -0.020433111,\n                0.017785877,\n                0.019997481,\n                0.0022559133,\n                -0.03907317,\n                -0.051103923,\n                -0.071173824,\n                0.053590193,\n                -0.00039569003,\n                -0.02634158,\n                0.038356707,\n                -0.044471543,\n                -0.026381122,\n                0.060729213,\n                -0.0015010594,\n                0.009178059,\n                -0.03814854,\n                -0.0335207,\n                -0.006366605,\n                0.0699114,\n                -0.03376228,\n                -0.04919081,\n                0.022370158,\n                0.03728636,\n                0.0019534538,\n                0.033083685,\n                -0.025713654,\n                0.0039565335,\n                0.039998118,\n                0.004219308,\n                0.031447567,\n                -0.034697294,\n                -0.06002273,\n                0.0017590513,\n                -0.05310806,\n                0.026799636,\n                0.03808429,\n                -0.0034171655,\n                0.02317741,\n                0.0010039983,\n                0.05165406,\n                0.02199643,\n                0.0071839127,\n                0.048319813,\n                -0.028710654,\n                0.014481488,\n                0.042876266,\n                0.00971418,\n                0.035771746,\n                -0.00028289642,\n                0.0046831574,\n                0.016665116,\n                0.015736846,\n                -0.021243365,\n                0.004980782,\n                0.016339755,\n                -0.06792292,\n                0.013651028,\n                0.0177446,\n                -0.04391165,\n                0.045561682,\n                -0.044052992,\n                0.0083501125,\n                0.008366932,\n                -0.013913697,\n                -0.043398622,\n                0.050080486,\n                -0.0056452267,\n                0.04161385,\n                0.020320134,\n                0.021755314,\n                0.0011448516,\n                -0.0411989,\n                -0.0035689236,\n                0.04702633,\n                0.02654662,\n                0.030663582,\n                0.010421835,\n                0.054092076,\n                -0.06069732,\n                0.0013149548,\n                0.020936277,\n                -0.0614263,\n                -0.049643576,\n                0.012562762,\n                0.0102322195,\n                0.025091235,\n                0.0028795819,\n                -0.027214611,\n                -0.011247869,\n                -0.02276021,\n                0.008272596,\n                -0.026481794,\n                0.026383912,\n                0.023627581,\n                -0.07809844,\n                0.0044191885,\n                -0.025280824,\n                0.030396955,\n                0.01092175,\n                0.020189727,\n                -0.038342953,\n                0.02326414,\n                -0.008439606,\n                -0.017581157,\n                -0.022658968,\n                -0.02347564,\n                0.03630271,\n                0.046517637,\n                0.021519803,\n                -0.015831519,\n                -0.0032932623,\n                0.02369677,\n                0.034070738,\n                -0.012196431,\n                0.0044763144,\n                0.068362884,\n                0.05114801,\n                -0.056857582,\n                -0.019116642,\n                0.049374294,\n                -0.027195053,\n                -0.039168533,\n                -0.0026092464,\n                0.011457802,\n                -0.055922214,\n                -0.0445439,\n                0.03498298,\n                -0.010998333,\n                -0.009106507,\n                0.022072025,\n                -0.02841455,\n                0.014976849,\n                -0.024675764,\n                -0.06159547,\n                -0.02528909,\n                0.017897613,\n                -0.040772773,\n                0.035791636,\n                -0.052965496,\n                0.011982663,\n                -0.03884743,\n                -0.011514634,\n                -0.015968667,\n                -0.026891917,\n                -0.031106751,\n                0.035658702,\n                -0.0021533202,\n                0.029527642,\n                0.057090763,\n                -0.01233917,\n                -0.02312109,\n                0.05304053,\n                -0.04792312,\n                -0.011728226,\n                0.0017240338,\n                0.048953593,\n                -0.007255561,\n                0.023849664,\n                -0.0044358587,\n                -0.0019388344,\n                0.02620899,\n                0.030698953,\n                -0.0063687125,\n                -0.012831426,\n                0.011434041,\n                -0.030897478,\n                -0.0007876411,\n                -0.026856892,\n                0.043555357,\n                -0.043578684,\n                -0.03209827,\n                0.03869376,\n                0.01375232,\n                -0.023909329,\n                -0.013714461,\n                -0.0049255583,\n                -0.020128004,\n                0.020287968,\n                0.011485728,\n                0.016435845,\n                0.01555083,\n                0.0035887926\n            ]\n        },\n        {\n            \"embedding\": [\n                0.0020158237,\n                0.025287563,\n                -0.016845388,\n                -0.03592976,\n                -0.047664836,\n                -0.03958005,\n                -0.020835502,\n                -0.025453655,\n                -0.018263435,\n                0.032363426,\n                -0.04974721,\n                0.004816722,\n                0.034636453,\n                -0.020068668,\n                -0.008615431,\n                -0.019025447,\n                0.03852098,\n                0.013482676,\n                0.009977214,\n                0.005119727,\n                0.033017877,\n                0.009484272,\n                0.018865013,\n                -0.041463755,\n                0.041218963,\n                0.004716821,\n                0.021308037,\n                -0.0063252724,\n                -0.005728034,\n                0.003913606,\n                0.00019979362,\n                -0.0036622225,\n                0.03142623,\n                -0.03676846,\n                0.042131554,\n                0.011433819,\n                -0.022613058,\n                0.005414195,\n                0.027095737,\n                -0.010865254,\n                -0.01681485,\n                -0.018119438,\n                0.003975651,\n                0.011846686,\n                -0.0070602153,\n                -0.005832205,\n                0.012932034,\n                -0.00502272,\n                -0.043882273,\n                0.058975637,\n                0.035861105,\n                -0.018859535,\n                -0.050051365,\n                -0.025992239,\n                0.01176301,\n                -0.03797419,\n                0.016589038,\n                0.029692005,\n                0.0021540222,\n                -0.041037522,\n                -0.018854627,\n                0.059724677,\n                -0.03059727,\n                0.013984155,\n                0.02064458,\n                -0.045287084,\n                0.0023027542,\n                -0.027098801,\n                -0.080397494,\n                0.012157696,\n                -0.0042481893,\n                0.010946727,\n                -0.0066355956,\n                -0.044213638,\n                -0.009999527,\n                0.02049976,\n                -0.05225648,\n                0.018428747,\n                -0.010153825,\n                0.0019762525,\n                0.07975619,\n                0.0007140441,\n                -0.024762971,\n                -0.0004344487,\n                -0.00963093,\n                0.00777054,\n                -0.076065704,\n                0.007668219,\n                0.01938842,\n                -0.023689179,\n                0.003487684,\n                -0.005643101,\n                0.04856037,\n                -0.019448437,\n                0.0080423625,\n                -0.007842349,\n                0.024789803,\n                -0.013491635,\n                0.055079203,\n                0.0020988896,\n                0.052100554,\n                -0.04915437,\n                -0.016359026,\n                0.037286453,\n                0.030029833,\n                0.03710452,\n                -0.01641138,\n                -0.009576302,\n                0.048365124,\n                -0.033584606,\n                -0.011963077,\n                -0.035437685,\n                -0.03021572,\n                0.0459692,\n                -0.011156789,\n                0.038603786,\n                0.018776644,\n                0.03041803,\n                0.04392766,\n                -0.054767434,\n                0.007257226,\n                -0.0155297285,\n                0.029619187,\n                -0.054859124,\n                0.027828963,\n                0.020715091,\n                0.019812457,\n                -0.028654426,\n                0.0047780517,\n                -0.0336154,\n                0.012475122,\n                -0.042481553,\n                0.03431963,\n                -0.01232804,\n                -0.007116358,\n                -0.040902834,\n                -0.023855506,\n                0.066771984,\n                -0.048268285,\n                -0.042524934,\n                0.0077611925,\n                -0.045539703,\n                0.02076179,\n                -0.06477313,\n                -0.048221298,\n                -0.012780114,\n                0.022403242,\n                -0.021904813,\n                -0.082978144,\n                -0.015177855,\n                -0.010355184,\n                0.0053990344,\n                -0.00742876,\n                0.0376905,\n                -0.029539667,\n                0.016198892,\n                -0.0040753596,\n                -0.025581587,\n                0.087532446,\n                0.0053587123,\n                0.016398054,\n                -0.027947607,\n                -0.040404692,\n                0.0048012673,\n                0.034425378,\n                0.027762264,\n                -0.019637132,\n                0.018513523,\n                -0.02631612,\n                -0.07058497,\n                0.023285247,\n                -0.061025195,\n                -0.04965955,\n                0.03884418,\n                -0.03039677,\n                0.026570272,\n                -0.023343835,\n                -0.05653622,\n                0.02720618,\n                0.01444624,\n                0.04710275,\n                0.0069666784,\n                -0.0014206774,\n                -0.01485246,\n                0.030015875,\n                0.015735783,\n                -0.013822852,\n                0.036357187,\n                -0.0066792523,\n                -0.061607026,\n                -0.042105794,\n                0.007190425,\n                0.0232815,\n                -0.008945718,\n                0.05795298,\n                0.0099783875,\n                0.04632419,\n                0.054833718,\n                0.03357004,\n                0.0028823575,\n                0.016017761,\n                -0.024265386,\n                -0.030120814,\n                0.0088176215,\n                0.010499656,\n                -0.008332365,\n                -0.016186861,\n                0.022753656,\n                -0.02429541,\n                -0.01718581,\n                -0.0004076862,\n                -0.014133789,\n                -0.018608576,\n                -0.26770604,\n                0.013933734,\n                0.0050293054,\n                -0.17067732,\n                -0.022553334,\n                0.010062731,\n                -0.0021377476,\n                -0.0069162166,\n                0.022366185,\n                -0.00854877,\n                -0.013806452,\n                0.018616127,\n                -0.044413544,\n                -0.007361618,\n                0.011737713,\n                -0.092893094,\n                -0.05459188,\n                0.0014384713,\n                -0.002296429,\n                -0.058233306,\n                0.082239285,\n                -0.04718318,\n                -0.04189158,\n                -0.03702577,\n                -0.0074884915,\n                -0.036593553,\n                0.0033863871,\n                -0.014748674,\n                -0.012037901,\n                -0.016413955,\n                0.056606848,\n                0.014965445,\n                0.020008279,\n                -0.0106951995,\n                -0.014324943,\n                -0.00665142,\n                -0.014326223,\n                0.037421733,\n                -0.0019545008,\n                -0.20000893,\n                -0.0002124326,\n                0.040119648,\n                -0.020477382,\n                0.048936866,\n                0.045965195,\n                -0.059114356,\n                0.006574363,\n                0.057419285,\n                -0.0031919403,\n                0.018482637,\n                0.034118805,\n                -0.029099915,\n                0.030829145,\n                -0.022965692,\n                -0.0064935326,\n                -0.0006526871,\n                -0.0072012725,\n                0.01266329,\n                0.012974209,\n                0.02007501,\n                0.029706074,\n                -0.024535248,\n                0.019232053,\n                0.019265702,\n                0.01687622,\n                -0.02311849,\n                -0.0024017836,\n                -0.043153536,\n                0.042117734,\n                -0.017245037,\n                -0.032937963,\n                -0.043313183,\n                0.048110098,\n                -0.0035192021,\n                0.021102257,\n                -0.023005132,\n                0.014987528,\n                -0.039249368,\n                0.00805459,\n                0.05867054,\n                -0.03748587,\n                0.03797292,\n                0.036692377,\n                -0.047612492,\n                -0.016773095,\n                -0.03335003,\n                -0.013637913,\n                0.031841904,\n                0.018478597,\n                0.06509944,\n                -0.04024483,\n                0.037451945,\n                -0.041550763,\n                0.043728065,\n                0.039627828,\n                0.031815507,\n                0.041965507,\n                -0.007019427,\n                -0.021758048,\n                -0.020523392,\n                0.0010254326,\n                -0.037244797,\n                -0.04801734,\n                -0.027012497,\n                -0.04798453,\n                -0.0027710623,\n                0.04368104,\n                0.012548191,\n                0.016915863,\n                0.019431423,\n                -0.019922333,\n                0.023983488,\n                0.014967972,\n                -0.0061357897,\n                0.031171085,\n                0.004405609,\n                -0.002738774,\n                -0.06997909,\n                -0.044679735,\n                0.023374794,\n                0.0019452503,\n                0.021801522,\n                -0.05105351,\n                -0.025997883,\n                0.012154031,\n                -0.025119256,\n                0.04113132,\n                -0.008788574,\n                0.025636684,\n                -0.0071239523,\n                0.06486686,\n                0.004688582,\n                0.032376952,\n                -0.015290897,\n                0.0096490625,\n                0.01090623,\n                0.00231869,\n                0.007828852,\n                0.0059254477,\n                -0.031168899,\n                -0.0024569074,\n                -0.03619216,\n                0.05047453,\n                0.06370074,\n                0.11240023,\n                0.019299174,\n                0.04490232,\n                0.05675016,\n                0.054911416,\n                -0.022915356,\n                0.02941844,\n                0.042418193,\n                0.0059578647,\n                -0.0035934404,\n                -0.0078892335,\n                0.0109103825,\n                0.0014614139,\n                -0.036956843,\n                -0.017623203,\n                0.0003661574,\n                -0.02323383,\n                0.009318862,\n                -0.030827967,\n                -0.0041206833,\n                0.019236708,\n                -0.021369029,\n                -0.06402811,\n                0.012915256,\n                -0.028726712,\n                -0.019247638,\n                -0.010479488,\n                -0.0076907207,\n                -0.035767592,\n                0.05917684,\n                -0.020197185,\n                -0.03881063,\n                0.06936724,\n                0.04691607,\n                0.0054556783,\n                0.0101655675,\n                -0.0031506026,\n                0.061345354,\n                -0.035585355,\n                0.034687217,\n                0.041517712,\n                0.004471414,\n                -0.041380003,\n                0.021550117,\n                -0.011488308,\n                0.040093377,\n                -0.0075227916,\n                -0.004192436,\n                0.11183229,\n                -0.08466176,\n                -0.021922985,\n                0.04588175,\n                0.0015828888,\n                -0.04555937,\n                -0.015023699,\n                0.011171426,\n                0.009052797,\n                0.048730362,\n                0.019365534,\n                0.00051874126,\n                0.02534035,\n                -0.026653307,\n                0.031619567,\n                -0.07878899,\n                -0.03002621,\n                0.007760127,\n                -0.023746178,\n                0.1973081,\n                0.01523608,\n                -0.021174926,\n                -0.018297132,\n                -0.06897882,\n                -0.009704699,\n                0.007023514,\n                -0.03581289,\n                0.0069442675,\n                -0.0333415,\n                0.07558908,\n                -0.03006298,\n                -0.0364177,\n                0.04440638,\n                0.04368674,\n                -0.04109242,\n                -0.040803883,\n                -0.04826216,\n                -0.02751158,\n                -0.034047563,\n                -0.038121603,\n                0.06722889,\n                -0.01763972,\n                -0.036085993,\n                -0.015813492,\n                -0.028783387,\n                0.001097751,\n                0.005408359,\n                -0.043549493,\n                -0.015507362,\n                -0.015347543,\n                0.037799783,\n                0.018033942,\n                0.015250454,\n                0.035262886,\n                -0.022956371,\n                0.005497373,\n                -0.021541316,\n                -0.025270699,\n                0.007488276,\n                0.012375357,\n                -0.016296878,\n                0.020810397,\n                0.034438904,\n                0.0040846663,\n                -0.027378507,\n                0.0387545,\n                0.071436204,\n                -0.015868034,\n                0.04778077,\n                -0.00881389,\n                -0.01734696,\n                -0.01452919,\n                0.025320444,\n                -0.039332736,\n                -0.02693561,\n                0.0034698462,\n                0.0046925,\n                0.015711803,\n                -0.005133219,\n                0.012339821,\n                0.0010172018,\n                -0.04931821,\n                -0.0005731139,\n                0.021842862,\n                -0.055084217,\n                -0.029758366,\n                0.021052403,\n                -0.023936655,\n                -0.014369545,\n                0.02435898,\n                -0.0046805213,\n                -0.020763312,\n                -0.019960748,\n                0.0081823515,\n                -0.0067552794,\n                -0.023683533,\n                0.016371462,\n                0.06326071,\n                0.03355635,\n                -0.014671487,\n                0.05153726,\n                -0.019717274,\n                0.070241116,\n                -0.053514972,\n                -0.03999054,\n                -0.047076475,\n                0.03269687,\n                0.040102046,\n                0.058333848,\n                0.017104156,\n                -0.021676753,\n                -0.008248389,\n                -0.0017309339,\n                -0.019753253,\n                -0.042057358,\n                0.019957297,\n                -0.054027136,\n                0.030845089,\n                -0.0062115034,\n                -0.020782994,\n                0.038423795,\n                -0.017797247,\n                -0.035676233,\n                -0.0015707554,\n                -0.038477767,\n                0.0028339669,\n                -0.011151631,\n                0.016861677,\n                0.07105299,\n                -0.028394427,\n                0.06570126,\n                -0.030858066,\n                0.054218356,\n                -0.027805027,\n                -0.018299736,\n                -0.018706694,\n                -0.003958362,\n                0.023571864,\n                -0.05080319,\n                -0.026186176,\n                0.019688854,\n                0.031323977,\n                -0.05156888,\n                -0.09957301,\n                0.004911486,\n                -0.02753244,\n                0.02390534,\n                -0.012331503,\n                0.004393476,\n                -0.050062712,\n                0.01159373,\n                -0.014295048,\n                0.0055582034,\n                0.01159085,\n                0.012639836,\n                0.013697784,\n                -0.015663037,\n                -0.0026983204,\n                0.02924423,\n                -0.017681127,\n                0.07491727,\n                0.008554521,\n                -0.062167924,\n                -0.036746025,\n                0.029022135,\n                0.022140516,\n                0.0029028985,\n                0.0032552583,\n                0.023882765,\n                -0.007987077,\n                -0.012645441,\n                0.056068998,\n                0.030099811,\n                0.011618324,\n                -0.017255628,\n                -0.0016933284,\n                0.029745324,\n                -0.04183479,\n                0.047661178,\n                -0.000015634094,\n                -0.01649405,\n                0.00452104,\n                0.013365458,\n                0.015045916,\n                -0.045552067,\n                -0.055099912,\n                -0.037007075,\n                0.021733066,\n                0.012281149,\n                0.013445455,\n                0.03880962,\n                -0.021211391,\n                -0.022239674,\n                0.05987172,\n                0.0035438947,\n                0.043633886,\n                -0.04325554,\n                -0.040647347,\n                -0.0015909659,\n                0.05012533,\n                -0.0073361075,\n                -0.03696174,\n                -0.009414169,\n                0.027028255,\n                0.0015646926,\n                0.026176801,\n                -0.06883822,\n                0.016275033,\n                0.02222622,\n                -0.001589958,\n                0.024884801,\n                -0.033185944,\n                -0.036177665,\n                -0.044087943,\n                -0.017166099,\n                -0.014094012,\n                0.029100964,\n                0.023891939,\n                0.022161279,\n                0.0017052768,\n                0.06917469,\n                0.01765669,\n                0.008608394,\n                0.00006275832,\n                -0.022640143,\n                0.014487096,\n                0.079438925,\n                0.029022204,\n                0.027922481,\n                -0.00970126,\n                0.00027346943,\n                0.0541696,\n                0.005345955,\n                -0.055732045,\n                -0.008336484,\n                0.014117115,\n                -0.038447276,\n                0.014496147,\n                0.0005338084,\n                -0.040883537,\n                0.036885194,\n                -0.018777877,\n                0.011311211,\n                -0.0017018591,\n                -0.013705285,\n                -0.05964086,\n                0.056495767,\n                0.002515566,\n                0.04841193,\n                0.013650778,\n                -0.012658312,\n                0.011117087,\n                -0.09950494,\n                0.0012584223,\n                0.032663688,\n                0.05329064,\n                0.00794591,\n                -0.010849058,\n                0.033564515,\n                -0.04784377,\n                -0.012848716,\n                0.033687893,\n                -0.016435431,\n                -0.038629904,\n                0.016460694,\n                0.02669261,\n                0.03168198,\n                -0.011487428,\n                -0.0044670217,\n                -0.060522117,\n                -0.0032751814,\n                0.0042015337,\n                -0.036750335,\n                0.03730463,\n                0.034245517,\n                -0.043995187,\n                0.047341913,\n                -0.012975507,\n                0.048642494,\n                0.010105873,\n                0.012118126,\n                0.018878782,\n                -0.01660326,\n                -0.03530434,\n                -0.016560607,\n                -0.036250398,\n                -0.017519336,\n                0.012720898,\n                0.04438613,\n                -0.019843064,\n                -0.014281029,\n                -0.008166933,\n                0.0026992504,\n                0.014344953,\n                0.0058511873,\n                -0.003972277,\n                0.05154374,\n                0.063007586,\n                -0.031214133,\n                -0.045488704,\n                0.023764335,\n                -0.06572905,\n                -0.049824033,\n                0.033468794,\n                -0.026146634,\n                -0.025404798,\n                -0.04469458,\n                0.029535783,\n                -0.035810076,\n                0.0023374965,\n                -0.01674255,\n                -0.0114576835,\n                0.001705025,\n                -0.0074805664,\n                -0.051109135,\n                -0.027713628,\n                0.019516004,\n                -0.09367784,\n                0.038992096,\n                -0.035197873,\n                -0.017895773,\n                -0.011665441,\n                -0.006065571,\n                -0.01809194,\n                -0.0413777,\n                -0.020094331,\n                0.02868206,\n                0.018292015,\n                -0.057825927,\n                0.003504169,\n                -0.007626556,\n                -0.027481867,\n                0.0025247063,\n                -0.01826587,\n                -0.014214093,\n                0.03876864,\n                0.016542122,\n                0.004838228,\n                0.023547886,\n                0.018908776,\n                -0.0062351166,\n                0.000095139905,\n                0.06091936,\n                0.006902465,\n                -0.009101364,\n                0.027058112,\n                -0.02376447,\n                -0.004858477,\n                -0.061739646,\n                0.1044127,\n                -0.053378697,\n                -0.0073493076,\n                0.03125281,\n                0.049712364,\n                -0.033440582,\n                -0.009867746,\n                -0.037596192,\n                -0.01576186,\n                -0.02046878,\n                -0.005931673,\n                0.034239665,\n                0.023638828,\n                0.020965884\n            ]\n        },\n        {\n            \"embedding\": [\n                -0.015106457,\n                0.026971959,\n                0.024798397,\n                -0.059275236,\n                -0.061207324,\n                -0.0520355,\n                -0.019253645,\n                0.0073070377,\n                -0.023473945,\n                0.028689742,\n                0.021965027,\n                -0.0011332954,\n                -0.0021917413,\n                -0.062231794,\n                -0.026825989,\n                -0.0038993603,\n                0.024400353,\n                0.044247165,\n                -0.020513725,\n                -0.025366971,\n                -0.0005423439,\n                0.04807145,\n                -0.036899157,\n                -0.039757352,\n                0.055090215,\n                -0.009843013,\n                0.027006725,\n                -0.026108902,\n                -0.021672059,\n                -0.032346368,\n                -0.0148404455,\n                -0.0057404027,\n                -0.004722383,\n                -0.0494553,\n                0.020767804,\n                -0.016332448,\n                -0.016807497,\n                0.00997905,\n                0.056530103,\n                -0.009362874,\n                -0.007528449,\n                -0.016703246,\n                0.004651969,\n                0.038097776,\n                -0.0051257154,\n                0.023126481,\n                0.0020200491,\n                -0.012372494,\n                -0.008008254,\n                0.03978704,\n                0.054616787,\n                0.0011424647,\n                -0.08138528,\n                -0.0217816,\n                -0.010951473,\n                -0.013561565,\n                0.0025654049,\n                0.0231151,\n                0.0025701276,\n                -0.06158305,\n                -0.016241113,\n                0.08559343,\n                -0.008298811,\n                0.025124943,\n                0.03321287,\n                -0.034870647,\n                0.0061392905,\n                0.005377093,\n                -0.02190148,\n                0.036210474,\n                0.019209476,\n                0.014817991,\n                -0.050120655,\n                0.007462011,\n                0.028471615,\n                0.044614352,\n                -0.037410982,\n                -0.003240482,\n                -0.03872846,\n                -0.047628414,\n                0.06626368,\n                -0.010232834,\n                -0.069076754,\n                0.008059037,\n                -0.008816633,\n                0.01749673,\n                -0.025676737,\n                -0.0057294383,\n                0.025200555,\n                -0.015643397,\n                0.01249371,\n                0.0059022126,\n                0.047024406,\n                -0.010111726,\n                -0.011748128,\n                0.012590072,\n                0.0025192907,\n                -0.032409098,\n                0.014681704,\n                0.0071991025,\n                0.017907342,\n                -0.030322116,\n                -0.017153356,\n                0.041264255,\n                0.030060623,\n                0.008256068,\n                -0.0047721397,\n                -0.061916728,\n                0.043012884,\n                -0.005509612,\n                0.0345183,\n                -0.02267824,\n                -0.017555514,\n                0.06192533,\n                -0.001121977,\n                0.053156007,\n                0.020334037,\n                0.05152607,\n                0.006231922,\n                -0.05079394,\n                0.023498107,\n                0.0160257,\n                0.02612122,\n                -0.032653913,\n                0.020526579,\n                -0.024446996,\n                0.0056763594,\n                -0.029793495,\n                0.015462191,\n                -0.028300673,\n                0.019589253,\n                -0.05768613,\n                0.012051431,\n                0.011309045,\n                -0.039843574,\n                -0.07411132,\n                -0.069970675,\n                0.06255638,\n                -0.096409604,\n                -0.01618704,\n                0.010923904,\n                -0.05025583,\n                0.012606117,\n                -0.051006056,\n                -0.048522796,\n                -0.014414882,\n                0.000097432654,\n                -0.08059631,\n                -0.08171019,\n                -0.02014465,\n                -0.042800225,\n                -0.011071636,\n                0.0043826825,\n                0.011764736,\n                -0.03856917,\n                0.010751855,\n                0.028848557,\n                -0.03252548,\n                0.039893154,\n                -0.02021484,\n                0.01550766,\n                -0.040328816,\n                -0.015045822,\n                0.0011879732,\n                -0.014535006,\n                0.019625392,\n                -0.015803182,\n                0.034920763,\n                -0.034066655,\n                -0.07789529,\n                0.0035708356,\n                -0.032472488,\n                -0.06309494,\n                0.00073450396,\n                -0.016349684,\n                -0.0017089257,\n                0.0066366447,\n                -0.020775108,\n                0.025202883,\n                0.016096575,\n                0.04458527,\n                -0.04191998,\n                -0.0068589523,\n                -0.011147833,\n                0.022864845,\n                -0.016309356,\n                0.009837423,\n                0.025298202,\n                -0.00949038,\n                -0.05184125,\n                -0.054407347,\n                0.007023159,\n                0.021503065,\n                0.012153459,\n                0.032997314,\n                -0.0055118534,\n                0.025067667,\n                0.04926886,\n                0.035664786,\n                0.009192368,\n                -0.00012382634,\n                0.00088393776,\n                -0.043902162,\n                -0.005826504,\n                -0.0089576775,\n                0.021277614,\n                -0.056323573,\n                -0.014126473,\n                -0.028852485,\n                -0.04515999,\n                -0.0069701024,\n                0.01854391,\n                -0.05432962,\n                -0.2541328,\n                0.019008,\n                -0.008246857,\n                -0.1708262,\n                -0.028542098,\n                -0.008907518,\n                0.0245789,\n                0.0019661533,\n                -0.0000147685605,\n                -0.007748491,\n                -0.006690153,\n                0.031351402,\n                -0.01927999,\n                -0.011288788,\n                -0.021223325,\n                -0.010286142,\n                -0.039674096,\n                0.047148287,\n                -0.03778727,\n                -0.021056734,\n                0.08160512,\n                -0.033954024,\n                -0.02768446,\n                0.031217523,\n                0.01189944,\n                0.006336936,\n                -0.0041132257,\n                -0.003221212,\n                0.0111133475,\n                -0.011854736,\n                0.057701766,\n                0.041062005,\n                -0.013565413,\n                -0.007312104,\n                -0.021596141,\n                -0.038604364,\n                -0.034166537,\n                0.056691177,\n                0.030738274,\n                -0.1920608,\n                -0.023041729,\n                0.06228534,\n                0.004758604,\n                0.028823026,\n                0.03369982,\n                0.010075261,\n                0.056648698,\n                0.04740119,\n                0.002018371,\n                -0.020820308,\n                0.040572144,\n                -0.011985179,\n                0.010158514,\n                -0.0049685314,\n                -0.022812672,\n                0.020895084,\n                -0.004378446,\n                0.01551486,\n                0.013662877,\n                -0.012740006,\n                0.0251794,\n                0.007755456,\n                0.017564643,\n                0.027237618,\n                0.017729433,\n                -0.0044076866,\n                0.00088626344,\n                -0.025644034,\n                0.01845661,\n                -0.013310928,\n                -0.01330957,\n                -0.048848256,\n                -0.0031316294,\n                -0.038588952,\n                0.03023864,\n                0.0036453833,\n                0.0055418904,\n                -0.051350072,\n                0.009715083,\n                0.015959684,\n                -0.031734273,\n                0.055908896,\n                0.042732123,\n                -0.027239973,\n                -0.029631032,\n                -0.029002655,\n                -0.015444416,\n                -0.010346253,\n                0.08220012,\n                0.0157822,\n                -0.045658637,\n                0.035352323,\n                -0.023295688,\n                0.06342204,\n                0.06391937,\n                0.030967947,\n                0.024150144,\n                0.005120204,\n                -0.007801707,\n                -0.033873163,\n                -0.0026783228,\n                -0.01806003,\n                -0.051795628,\n                -0.011181818,\n                -0.04716186,\n                0.02531297,\n                0.023942808,\n                -0.019204106,\n                -0.036208134,\n                -0.008361675,\n                -0.019776635,\n                -0.0030509294,\n                -0.008951869,\n                -0.043349948,\n                0.02398786,\n                0.0010587916,\n                0.02572729,\n                -0.07201611,\n                -0.024804547,\n                0.018206159,\n                0.05101573,\n                0.0007189928,\n                -0.009812473,\n                0.011361135,\n                -0.0109067075,\n                0.0023674297,\n                0.06289934,\n                0.033418436,\n                0.010949636,\n                -0.032846127,\n                0.05437802,\n                -0.017386097,\n                0.009086592,\n                -0.01126419,\n                -0.023024615,\n                0.011736021,\n                -0.019891037,\n                0.017588768,\n                0.0093932785,\n                -0.008406509,\n                0.025151443,\n                -0.023841025,\n                0.012060278,\n                0.06444546,\n                0.056327634,\n                -0.004314949,\n                0.02757014,\n                0.07100123,\n                0.051207032,\n                -0.023813037,\n                0.019611517,\n                0.022133585,\n                0.004686139,\n                0.025561387,\n                0.024917252,\n                0.047782578,\n                -0.053661343,\n                -0.0612562,\n                0.03346239,\n                0.00431755,\n                -0.03549103,\n                0.023620829,\n                -0.006742198,\n                -0.0009986963,\n                -0.031729598,\n                -0.035571136,\n                -0.039953936,\n                -0.026075823,\n                -0.026312402,\n                -0.013887867,\n                -0.030634413,\n                -0.010431046,\n                -0.018976191,\n                0.037531286,\n                -0.04316516,\n                -0.022313628,\n                0.06169237,\n                0.03528445,\n                0.0059292284,\n                0.039310455,\n                0.03324394,\n                0.05405933,\n                -0.051123273,\n                0.06766184,\n                0.04431692,\n                0.0025098787,\n                -0.034218118,\n                -0.03085051,\n                -0.018334856,\n                -0.010420226,\n                0.010297764,\n                -0.015855666,\n                0.11549867,\n                -0.09006189,\n                0.002019245,\n                0.06598706,\n                0.02879912,\n                -0.06234608,\n                -0.029598638,\n                0.007402372,\n                -0.07354865,\n                0.04620778,\n                0.009867676,\n                0.011722778,\n                0.0202694,\n                -0.03214711,\n                0.010869998,\n                -0.07528444,\n                -0.090030804,\n                -0.0049048653,\n                -0.045043934,\n                0.18389487,\n                0.0047657453,\n                0.009425791,\n                0.0038101699,\n                -0.028843274,\n                -0.018615063,\n                0.02798871,\n                -0.053320937,\n                -0.0070999833,\n                -0.02655102,\n                0.07391316,\n                -0.054173194,\n                -0.013294468,\n                0.04568189,\n                0.004222366,\n                -0.04900107,\n                -0.016103793,\n                -0.002869574,\n                -0.0014171599,\n                -0.016776904,\n                -0.033416767,\n                0.019178161,\n                -0.009801509,\n                -0.011629328,\n                -0.044245984,\n                -0.050020814,\n                0.05824705,\n                -0.009140921,\n                -0.072073825,\n                -0.036185697,\n                -0.03268389,\n                -0.017922342,\n                0.028966514,\n                0.016276376,\n                0.015150369,\n                -0.03351265,\n                0.020394124,\n                -0.04183759,\n                -0.018239176,\n                0.00022652521,\n                0.02967368,\n                0.04061332,\n                0.02944306,\n                0.011374852,\n                0.048899032,\n                -0.008661292,\n                0.040050786,\n                0.066640094,\n                0.007342329,\n                0.05283647,\n                -0.020563057,\n                0.0043188897,\n                -0.037835903,\n                0.035249487,\n                -0.018424094,\n                -0.035085656,\n                -0.040568803,\n                0.02834868,\n                0.02945236,\n                -0.044376794,\n                0.0024415425,\n                -0.022500645,\n                -0.017861074,\n                0.029125474,\n                -0.012872699,\n                -0.042376064,\n                -0.031413596,\n                0.018572353,\n                -0.015661301,\n                -0.0020862543,\n                0.021442564,\n                -0.009821481,\n                -0.010321405,\n                -0.027707316,\n                -0.010019587,\n                -0.006979911,\n                -0.031373594,\n                0.017061247,\n                0.042125273,\n                0.04800826,\n                0.010909989,\n                0.063982755,\n                0.014147986,\n                0.05813228,\n                -0.044501577,\n                -0.037295267,\n                0.015874315,\n                0.026543437,\n                -0.0014825684,\n                0.037941877,\n                0.025199149,\n                -0.02555426,\n                -0.027623389,\n                0.0027329188,\n                0.021781731,\n                -0.033986736,\n                0.0044545843,\n                -0.06293967,\n                -0.013346213,\n                -0.0028637939,\n                0.012811959,\n                0.010664277,\n                -0.008758455,\n                -0.043909,\n                0.0133893415,\n                -0.039209664,\n                0.009362085,\n                -0.017033897,\n                -0.04601139,\n                0.065557435,\n                -0.02180458,\n                0.0499921,\n                -0.025016101,\n                0.085668035,\n                -0.0418292,\n                -0.030552708,\n                -0.023076715,\n                0.006526145,\n                0.013078085,\n                -0.041482605,\n                -0.0111603495,\n                0.009308936,\n                0.049937807,\n                -0.046072867,\n                -0.07675544,\n                -0.0050270804,\n                0.006681639,\n                0.017587274,\n                -0.021138374,\n                0.00071873574,\n                0.030154733,\n                -0.032338127,\n                -0.029999686,\n                0.010346338,\n                -0.0021100203,\n                -0.008253777,\n                0.01778653,\n                0.0075023226,\n                0.00961683,\n                0.0073709837,\n                -0.03887024,\n                0.040358867,\n                -0.0017194244,\n                -0.061780483,\n                -0.020234272,\n                0.033494998,\n                0.0053475644,\n                0.009038606,\n                0.008265998,\n                -0.06287484,\n                -0.027874323,\n                -0.007436894,\n                0.041908633,\n                0.064821385,\n                -0.00620829,\n                0.0052040373,\n                0.0020443513,\n                0.025766235,\n                -0.024112105,\n                0.034814563,\n                0.025577774,\n                0.0014969559,\n                0.031077284,\n                0.012756003,\n                -0.0022113703,\n                -0.04400771,\n                -0.026551494,\n                -0.06955728,\n                0.026371267,\n                0.009245096,\n                0.0013850312,\n                0.02092561,\n                -0.05232678,\n                -0.025771141,\n                0.057806157,\n                -0.046034385,\n                0.017515248,\n                -0.020137725,\n                -0.06434603,\n                -0.016178938,\n                0.058034383,\n                0.035735723,\n                -0.021419896,\n                0.0126421675,\n                0.041751638,\n                0.0061835833,\n                0.026378052,\n                -0.0028721523,\n                -0.013998948,\n                0.011454867,\n                0.03507391,\n                0.0047597913,\n                -0.051490963,\n                -0.024466192,\n                -0.050095342,\n                0.013167446,\n                0.03433104,\n                0.028612198,\n                -0.029107517,\n                -0.010287658,\n                -0.0064698625,\n                0.04992133,\n                -0.028219974,\n                -0.013981463,\n                0.015925031,\n                -0.025689235,\n                0.022568302,\n                0.038998835,\n                0.015424921,\n                0.017851407,\n                0.003765194,\n                0.021878453,\n                0.04645841,\n                0.045964576,\n                -0.027195435,\n                -0.017025491,\n                0.02553792,\n                -0.07624784,\n                0.031138385,\n                0.038491085,\n                -0.01985517,\n                0.031288955,\n                -0.018403048,\n                -0.010133065,\n                0.00020586856,\n                0.033267483,\n                0.0012323761,\n                0.042604685,\n                -0.004584694,\n                0.037787277,\n                0.014475245,\n                0.062391672,\n                -0.010477834,\n                -0.071266256,\n                0.019334009,\n                0.02526359,\n                0.051395353,\n                -0.005046525,\n                0.0021273976,\n                0.04826362,\n                -0.014649248,\n                -0.034927934,\n                0.034913007,\n                -0.05254553,\n                -0.025782732,\n                0.025150068,\n                0.034614522,\n                0.049298093,\n                0.00648612,\n                -0.016358456,\n                0.0061318926,\n                0.004515137,\n                0.009227248,\n                -0.0507332,\n                0.019435506,\n                0.041498676,\n                0.0077684387,\n                0.029423835,\n                -0.023470335,\n                0.06257801,\n                0.009250255,\n                0.04586294,\n                -0.039245963,\n                0.0034503606,\n                -0.04602148,\n                -0.022578718,\n                -0.046177555,\n                -0.002091353,\n                0.022898791,\n                0.059470244,\n                0.0017674556,\n                -0.019659797,\n                -0.0036319545,\n                -0.0022531166,\n                0.006144886,\n                -0.013836759,\n                0.004572389,\n                0.06174041,\n                0.019532908,\n                0.02744936,\n                0.0020288953,\n                0.020362176,\n                -0.047484454,\n                -0.037226852,\n                0.046550795,\n                0.009865154,\n                -0.06177345,\n                -0.020632379,\n                0.0616365,\n                -0.0039049422,\n                -0.06800024,\n                0.0073864614,\n                -0.019046618,\n                0.013587834,\n                -0.012370824,\n                -0.057624508,\n                -0.014709255,\n                0.034855254,\n                -0.07507728,\n                0.020680588,\n                -0.00041161568,\n                -0.011373276,\n                0.001953965,\n                0.038668085,\n                -0.0029086045,\n                0.0027269693,\n                -0.046997543,\n                0.005004571,\n                -0.006097341,\n                -0.005405849,\n                0.026154144,\n                -0.0019516163,\n                -0.01285137,\n                0.021621924,\n                -0.040003713,\n                -0.018844401,\n                0.026759531,\n                -0.0039481167,\n                -0.0121163195,\n                0.046039034,\n                -0.0042898622,\n                0.006429684,\n                0.0145932445,\n                0.06660939,\n                0.0020825076,\n                0.026045185,\n                0.002475193,\n                0.008323652,\n                -0.020205835,\n                -0.024740687,\n                0.084278025,\n                -0.05839616,\n                0.0020403839,\n                0.04764723,\n                0.017739264,\n                -0.062947504,\n                -0.023894174,\n                0.018812094,\n                -0.031719647,\n                -0.006932938,\n                -0.039467726,\n                0.005466618,\n                0.011767466,\n                0.005912774\n            ]\n        }\n    ],\n    \"input_token_count\": 39\n}"
						}
					]
				}
			]
		},
		{
			"name": "Extraction",
			"item": [
				{
					"name": "Named Entity Extraction (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Act as a webmaster who must extract structured information from emails. Read the below email and extract and categorize each entity.\\n\\nInput: \\\"Golden Bank is a competitor of Silver Bank in the US\\\" said John Doe.\\nNamed Entities: Golden Bank: company, Silver Bank: company, US: country, John Doe: person\\n\\nInput: Dear team, \\n\\nI hope this email finds you well. I wanted to share some outstanding achievements from our recent sales efforts.\\n\\nWe now have a multimillion dollar contract with Golden Retail, where we are providing cutting-edge software solution that streamlines inventory management for retail businesses. The customer was struggling with manual inventory tracking, leading to inefficiencies and errors. We have great testimonials from John Doe who is our contact at Golden Retail.\\n\\nBest regards,\\n\\nSarah\\nNamed Entities:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 50,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Act as a webmaster who must extract structured information from emails. Read the below email and extract and categorize each entity.\\n\\nInput: \\\"Golden Bank is a competitor of Silver Bank in the US\\\" said John Doe.\\nNamed Entities: Golden Bank: company, Silver Bank: company, US: country, John Doe: person\\n\\nInput: Dear team, \\n\\nI hope this email finds you well. I wanted to share some outstanding achievements from our recent sales efforts.\\n\\nWe now have a multimillion dollar contract with Golden Retail, where we are providing cutting-edge software solution that streamlines inventory management for retail businesses. The customer was struggling with manual inventory tracking, leading to inefficiencies and errors. We have great testimonials from John Doe who is our contact at Golden Retail.\\n\\nBest regards,\\n\\nSarah\\nNamed Entities:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 50,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:35:53 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=1e96d457f1e23747"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=1e96d457f1e23747"
								},
								{
									"key": "X-Instana-S",
									"value": "691ca56c719fab3b"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000001e96d457f1e23747-691ca56c719fab3b-01"
								},
								{
									"key": "Tracestate",
									"value": "in=1e96d457f1e23747;691ca56c719fab3b"
								},
								{
									"key": "X-Instana-T",
									"value": "1e96d457f1e23747"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "6af4e9f3b98127d77441b7534f424e70"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcaba3286117dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:35:53.944Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Golden Retail: company, Sarah: person, John Doe: person\",\n            \"generated_token_count\": 15,\n            \"input_token_count\": 175,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Fact Extraction (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Extract the line of credit facility maximum borrowing capacity from the 10-K filing.\\n\\n10-K filing: The credit agreement also provides that up to $250 million in commitments may be used for letters of credit.\\nLine of credit facility maximum borrowing capacity: $250M\\n\\n10-K filing: In March 2021, we upsized the Credit Agreement by $50 million, which matures July 2023, to $1.725 billion.         \\nLine of credit facility maximum borrowing capacity: $1.725B\\n\\n10-K filing: We prepared our impairment test as of December 2022 and determined that the fair values of each of our reporting units exceeded net book value by more than 25%. Among our reporting units, the narrowest difference between the calculated fair value and net book value was in our Principal Markets segment’s Canada reporting unit, whose calculated fair value exceeded its net book value by 26.5%. Future developments related to macroeconomic factors, including increases to the discount rate used, or changes to other inputs and assumptions, including revenue growth, could reduce the fair value of this and/or other reporting units and lead to impairment. There were no goodwill impairment losses recorded for the nine months ended December 31, 2022. Cumulatively, the Company has recorded $234.5 million in goodwill impairment charges within its former EMEA ($146.5 million) and current United States ($88 million) reporting units. Revolving Credit Agreement In December 2021, we entered into a $2 billion multi-currency revolving credit agreement (the “Revolving Credit Agreement”) for our future liquidity needs. The Revolving Credit Agreement expires, unless extended, in October 2026. Interest rates on borrowings under the Revolving Credit Agreement are based on prevailing market interest rates, plus a margin, as further described in the Revolving Credit Agreement. The total expense recorded by the Company for the Revolving Credit Agreement was not material in any of the periods presented. We may voluntarily prepay borrowings under the Revolving Credit Agreement without premium or penalty, subject to customary “breakage” costs. The Revolving Credit Agreement includes certain customary mandatory prepayment provisions. Interest on Debt Interest expense for the three and nine months ended December 31, 2022 was $13.5 million and $32.5 million, compared to $9 million and $25 million for the three and nine months ended December 31, 2021. \\nLine of credit facility maximum borrowing capacity:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 5,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Extract the line of credit facility maximum borrowing capacity from the 10-K filing.\\n\\n10-K filing: The credit agreement also provides that up to $250 million in commitments may be used for letters of credit.\\nLine of credit facility maximum borrowing capacity: $250M\\n\\n10-K filing: In March 2021, we upsized the Credit Agreement by $50 million, which matures July 2023, to $1.725 billion.         \\nLine of credit facility maximum borrowing capacity: $1.725B\\n\\n10-K filing: We prepared our impairment test as of December 2022 and determined that the fair values of each of our reporting units exceeded net book value by more than 25%. Among our reporting units, the narrowest difference between the calculated fair value and net book value was in our Principal Markets segment’s Canada reporting unit, whose calculated fair value exceeded its net book value by 26.5%. Future developments related to macroeconomic factors, including increases to the discount rate used, or changes to other inputs and assumptions, including revenue growth, could reduce the fair value of this and/or other reporting units and lead to impairment. There were no goodwill impairment losses recorded for the nine months ended December 31, 2022. Cumulatively, the Company has recorded $234.5 million in goodwill impairment charges within its former EMEA ($146.5 million) and current United States ($88 million) reporting units. Revolving Credit Agreement In December 2021, we entered into a $2 billion multi-currency revolving credit agreement (the “Revolving Credit Agreement”) for our future liquidity needs. The Revolving Credit Agreement expires, unless extended, in October 2026. Interest rates on borrowings under the Revolving Credit Agreement are based on prevailing market interest rates, plus a margin, as further described in the Revolving Credit Agreement. The total expense recorded by the Company for the Revolving Credit Agreement was not material in any of the periods presented. We may voluntarily prepay borrowings under the Revolving Credit Agreement without premium or penalty, subject to customary “breakage” costs. The Revolving Credit Agreement includes certain customary mandatory prepayment provisions. Interest on Debt Interest expense for the three and nine months ended December 31, 2022 was $13.5 million and $32.5 million, compared to $9 million and $25 million for the three and nine months ended December 31, 2021. \\nLine of credit facility maximum borrowing capacity:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 5,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:34:47 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=025c441bc4145b6e"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=025c441bc4145b6e"
								},
								{
									"key": "X-Instana-T",
									"value": "025c441bc4145b6e"
								},
								{
									"key": "X-Instana-S",
									"value": "5abcdc7f0c6a2d41"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000025c441bc4145b6e-5abcdc7f0c6a2d41-01"
								},
								{
									"key": "Tracestate",
									"value": "in=025c441bc4145b6e;5abcdc7f0c6a2d41"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "e9c93cad8489b33752bd9f7b31415dfc"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcaa057c4c17dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:34:47.550Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"$2 billion\",\n            \"generated_token_count\": 3,\n            \"input_token_count\": 505,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Generation",
			"item": [
				{
					"name": "Marketing Email Generation (google/flan-t5-xxl)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Generate a 5 sentence marketing message for a company with the given characteristics.\\n\\nDetails Characteristics:\\n\\nCompany - Golden Bank\\n\\nOffer includes - no fees, 2% interest rate, no minimum balance\\n\\nTone - informative\\n\\nResponse requested - click the link\\n\\nEnd date - July 15\\n\\nEmail\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"random_seed\": 111,\r\n        \"stop_sequences\": [],\r\n        \"temperature\": 0.8,\r\n        \"top_k\": 50,\r\n        \"top_p\": 1,\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-t5-xxl\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Generate a 5 sentence marketing message for a company with the given characteristics.\\n\\nDetails Characteristics:\\n\\nCompany - Golden Bank\\n\\nOffer includes - no fees, 2% interest rate, no minimum balance\\n\\nTone - informative\\n\\nResponse requested - click the link\\n\\nEnd date - July 15\\n\\nEmail\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"random_seed\": 111,\r\n        \"stop_sequences\": [],\r\n        \"temperature\": 0.8,\r\n        \"top_k\": 50,\r\n        \"top_p\": 1,\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-t5-xxl\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:42:04 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=33afc317c97e71c4"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=33afc317c97e71c4"
								},
								{
									"key": "X-Instana-T",
									"value": "33afc317c97e71c4"
								},
								{
									"key": "X-Instana-S",
									"value": "7e56d31b59ad31df"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-000000000000000033afc317c97e71c4-7e56d31b59ad31df-01"
								},
								{
									"key": "Tracestate",
									"value": "in=33afc317c97e71c4;7e56d31b59ad31df"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "ee32acf4f0307ac6c8303dd3d6a1f835"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcb4abae87fabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-t5-xxl\",\n    \"created_at\": \"2024-04-05T21:42:04.523Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"We are offering a new checking account with no fees and a higher interest rate. If you are interested, click on the link and fill out the application. The deadline is July 15, so hurry! Contact us or visit us at our website if you have any questions.\",\n            \"generated_token_count\": 57,\n            \"input_token_count\": 62,\n            \"stop_reason\": \"eos_token\",\n            \"seed\": 111\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Thank You Note Generation (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Write a thank you note for attending a workshop.\\n\\nAttendees: interns\\nTopic: codefest, AI\\nTone: energetic\\n\\n\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"random_seed\": 111,\r\n        \"stop_sequences\": [],\r\n        \"temperature\": 0.8,\r\n        \"top_k\": 50,\r\n        \"top_p\": 1,\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Write a thank you note for attending a workshop.\\n\\nAttendees: interns\\nTopic: codefest, AI\\nTone: energetic\\n\\n\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"random_seed\": 111,\r\n        \"stop_sequences\": [],\r\n        \"temperature\": 0.8,\r\n        \"top_k\": 50,\r\n        \"top_p\": 1,\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:40:42 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=0110269fcc6c194d"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=0110269fcc6c194d"
								},
								{
									"key": "Tracestate",
									"value": "in=0110269fcc6c194d;45725ad631f97186"
								},
								{
									"key": "X-Instana-T",
									"value": "0110269fcc6c194d"
								},
								{
									"key": "X-Instana-S",
									"value": "45725ad631f97186"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000000110269fcc6c194d-45725ad631f97186-01"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "20157541ef51a89dde3a28c1bd10f73c"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcb2a3bdeefabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:40:42.311Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"We are thrilled that you could make it to our workshop and hope that you had a great time. There were lots of amazing interns at this year's codefest and we think you represent the best of them. Thank you for all of your hard work and continued efforts! Please let me know if I can be of further support. Much appreciated,\",\n            \"generated_token_count\": 74,\n            \"input_token_count\": 30,\n            \"stop_reason\": \"eos_token\",\n            \"seed\": 111\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Question Answering",
			"item": [
				{
					"name": "Article Q&A (meta-llama/llama-2-70b-chat)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Answer the following question using only information from the article. If there is no good answer in the article, say \\\"I don't know\\\".\\n\\nArticle: \\n###\\nTomatoes are one of the most popular plants for vegetable gardens. Tip for success: If you select varieties that are resistant to disease and pests, growing tomatoes can be quite easy. For experienced gardeners looking for a challenge, there are endless heirloom and specialty varieties to cultivate. Tomato plants come in a range of sizes. There are varieties that stay very small, less than 12 inches, and grow well in a pot or hanging basket on a balcony or patio. Some grow into bushes that are a few feet high and wide, and can be grown is larger containers. Other varieties grow into huge bushes that are several feet wide and high in a planter or garden bed. Still other varieties grow as long vines, six feet or more, and love to climb trellises. Tomato plants do best in full sun. You need to water tomatoes deeply and often. Using mulch prevents soil-borne disease from splashing up onto the fruit when you water. Pruning suckers and even pinching the tips will encourage the plant to put all its energy into producing fruit.\\n###\\n\\nQuestion: Is growing tomatoes easy?\\nAnswer: Yes, if you select varieties that are resistant to disease and pests.\\n\\nQuestion: What varieties of tomatoes are there?\\nAnswer: There are endless heirloom and specialty varieties.\\n\\nQuestion: Why should you use mulch when growing tomatoes?\\nAnswer:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 100,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [\r\n            \"\\n\\n\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Answer the following question using only information from the article. If there is no good answer in the article, say \\\"I don't know\\\".\\n\\nArticle: \\n###\\nTomatoes are one of the most popular plants for vegetable gardens. Tip for success: If you select varieties that are resistant to disease and pests, growing tomatoes can be quite easy. For experienced gardeners looking for a challenge, there are endless heirloom and specialty varieties to cultivate. Tomato plants come in a range of sizes. There are varieties that stay very small, less than 12 inches, and grow well in a pot or hanging basket on a balcony or patio. Some grow into bushes that are a few feet high and wide, and can be grown is larger containers. Other varieties grow into huge bushes that are several feet wide and high in a planter or garden bed. Still other varieties grow as long vines, six feet or more, and love to climb trellises. Tomato plants do best in full sun. You need to water tomatoes deeply and often. Using mulch prevents soil-borne disease from splashing up onto the fruit when you water. Pruning suckers and even pinching the tips will encourage the plant to put all its energy into producing fruit.\\n###\\n\\nQuestion: Is growing tomatoes easy?\\nAnswer: Yes, if you select varieties that are resistant to disease and pests.\\n\\nQuestion: What varieties of tomatoes are there?\\nAnswer: There are endless heirloom and specialty varieties.\\n\\nQuestion: Why should you use mulch when growing tomatoes?\\nAnswer:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 100,\r\n        \"min_new_tokens\": 0,\r\n        \"stop_sequences\": [\r\n            \"\\n\\n\"\r\n        ],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:33:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=7e7faf6cfd7460b2"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=7e7faf6cfd7460b2"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000007e7faf6cfd7460b2-6b45c93961f8a2ef-01"
								},
								{
									"key": "Tracestate",
									"value": "in=7e7faf6cfd7460b2;6b45c93961f8a2ef"
								},
								{
									"key": "X-Instana-T",
									"value": "7e7faf6cfd7460b2"
								},
								{
									"key": "X-Instana-S",
									"value": "6b45c93961f8a2ef"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "c1b6fc5ef911ed43ec9c90f1a9b95182"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fca7b3dafc17dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"meta-llama/llama-2-70b-chat\",\n    \"created_at\": \"2024-04-05T21:33:13.270Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" Using mulch prevents soil-borne disease from splashing up onto the fruit when you water.\\n\\n\",\n            \"generated_token_count\": 23,\n            \"input_token_count\": 370,\n            \"stop_reason\": \"stop_sequence\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Finance Q&A (ibm/granite-13b-instruct-v2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Below are a series of dialogues between various people and an AI assistant. The AI tries to be helpful, polite, honest, sophisticated, emotionally aware, and humble-but-knowledgeable. The assistant is happy to help with almost anything, and will do its best to understand exactly what is needed. It also tries to avoid giving false or misleading information, and it caveats when it isn't entirely sure about the right answer. Moreover, the assistant prioritizes caution over usefulness, refusing to answer questions that it considers unsafe, immoral, unethical or dangerous.\\n\\nHuman: What is a loan and how does it work?\\n\\nAssistant:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Below are a series of dialogues between various people and an AI assistant. The AI tries to be helpful, polite, honest, sophisticated, emotionally aware, and humble-but-knowledgeable. The assistant is happy to help with almost anything, and will do its best to understand exactly what is needed. It also tries to avoid giving false or misleading information, and it caveats when it isn't entirely sure about the right answer. Moreover, the assistant prioritizes caution over usefulness, refusing to answer questions that it considers unsafe, immoral, unethical or dangerous.\\n\\nHuman: What is a loan and how does it work?\\n\\nAssistant:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 1,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:31:13 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=df74cbbc70573feb"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=df74cbbc70573feb"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000df74cbbc70573feb-7282c39d45700f5d-01"
								},
								{
									"key": "Tracestate",
									"value": "in=df74cbbc70573feb;7282c39d45700f5d"
								},
								{
									"key": "X-Instana-T",
									"value": "df74cbbc70573feb"
								},
								{
									"key": "X-Instana-S",
									"value": "7282c39d45700f5d"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "692da136325122a4aeb430f6ef990962"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fca4c99b1e17dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-13b-instruct-v2\",\n    \"created_at\": \"2024-04-05T21:31:13.410Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" A loan is when one person gets a payment that helps them buy something, but they have to pay the money back later.\",\n            \"generated_token_count\": 26,\n            \"input_token_count\": 133,\n            \"stop_reason\": \"eos_token\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Summarization",
			"item": [
				{
					"name": "Meeting Transcript Summary (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Write a short summary for the meeting transcripts.\\n\\nTranscript: 00:00   [John]   I wanted to share an update on project X today.\\n00:15   [John]   Project X will be completed at the end of the week.\\n00:30   [Jane]  That's great!\\n00:35   [Jane]  I heard from customer Y today, and they agreed to buy our product.\\n00:45   [Joe]  Customer Z said they will too.\\n01:05   [John]   Great news, all around.\\nSummary: John shared an update that project X will be completed end of the week and will be purchased by customers Y and Z.\\n\\nTranscript: 00:00   [Jane]   The goal today is to agree on a design solution.\\n00:12   [John]  I think we should consider choice 1.\\n00:25   [Jane]   I agree\\n00:40   [Joe]  Choice 2 has the advantage that it will take less time.\\n01:03   [John]  Actually, that's a good point.\\n01:30   [Jane]   So, what should we do?\\n01:55   [John]  I'm good with choice 2.\\n02:20   [Joe]  Me too.\\n02:45   [Jane] Done!\\nSummary: Jane, John, and Joe decided to go with choice 2 for the design solution because it will take less time.\\n\\nTranscript: 1\\n\\nJohn Doe 00:00:01.415 --> 00:00:20.675\\n\\nA little bit of context of the email from last night, I've been working on the data from the feature set that came out of the analysis last time.\\n\\n2\\n\\nJohn Doe 00:00:21.334 --> 00:00:42.394\\n\\nThanks for sharing that. We were trying to understand the impact of changing levels of discretization, um, on both our data.\\n\\n3\\n\\nJohn Doe 00:00:42.784 --> 00:01:03.454\\n\\nAnd the original data, um, and 1 of the main things we were trying to to figure it out is, uh, because we did not have access to the notebook, uh, that you ran the analysis with was to how can we reproduce some of the results and in doing so I think we found something sort of fairly critical, which, which it was.\\n\\n4\\n\\nJohn Doe 00:01:03.664 --> 00:01:24.694\\n\\nAnswered earlier this morning, but, um, it's sort of prohibited us from continuing any further analysis in the sense that it seems that the, uh, evaluation of the testing, uh, of the downstream classifier was somehow done on the training data. Um, and the problem is.\\n\\n5\\n\\nJohn Doe 00:01:24.699 --> 00:01:45.004\\n\\nThat if we, um, I mean, obviously, we will have to rectify that, because it's, it's not informative fee kind of, uh, you know, use the training data for testing. But, um, I mean, if if that were in the protocol, just switching the level of visualization of the method.\\n\\n6\\n\\nJohn Doe 00:01:46.774 --> 00:02:06.754\\n\\nUm, to 10 minutes, that was, I think the case in the original setup, uh, takes the to 95% and I think that's kind of what triggered us to understand that that cannot be happening. Um, so 1 of the objectives, uh, if, if the group agrees for today's meeting, I think maybe we could just set up a.\\n\\n7\\n\\nJohn Doe 00:02:07.414 --> 00:02:28.114\\n\\nUm, outline for a consistent evaluation protocol that we can replicate on our side as well. And then, um, we essentially can replicate, uh, reproduce the, the, you know, as long as we can ensure, we can review the numbers. Um, we could just repeat our.\\n\\n8\\n\\nJohn Doe 00:02:28.174 --> 00:02:37.204\\n\\nAnalysis and in the next meeting shared that does that does that sound good to do? Are there any questions 1st of all? I think maybe I should ask that.\\n\\n9\\n\\nJohn Doe 00:02:47.555 --> 00:03:06.215\\n\\nAwesome, no, no questions then in that case, does that sound good to maybe, uh, go through the notebook a little bit, uh, in detail this time to understand the evaluation protocol um, and then we have certain suggestions that, uh, we could make about.\\n\\n10\\n\\nJohn Doe 00:03:06.244 --> 00:03:17.884\\n\\nUm, how we, uh, currently evaluate, um, to just avoid, uh, information leakage from training into the test would that be okay?\\n\\n11\\n\\nJane Doe 00:03:18.304 --> 00:03:25.834\\n\\nAnd maybe a, just to summarize for everyone, it sounds like you ran you rebound the tests that they were doing.\\n\\n12\\n\\nJane Doe 00:03:27.484 --> 00:03:31.594\\n\\nThe team has already done and achieved, uh.\\n\\n13\\n\\nJane Doe 00:03:31.714 --> 00:03:46.924\\n\\nOur score point 95 or something, so quite high, but suggestions that that probably isn't the best marker to evaluate and so we want to go back through it and make some suggestions on the overall approach.\\n\\n14\\n\\nJohn Doe 00:03:47.644 --> 00:03:52.534\\n\\nThat's right. That's right. I think I think the only just to kind of get the, the idea of, like, what we change.\\n\\n15\\n\\nJohn Doe 00:03:52.774 --> 00:04:13.894\\n\\nIf we change the level of discretization of our model to the level of discretization that, uh, was in the notebook for the original data, and then follow the same testing training protocol, which I must say is not, uh, we do get 95% but primarily, because we are testing on training data.\\n\\n16\\n\\nJohn Doe 00:04:13.924 --> 00:04:15.154\\n\\nIs not the right thing to do?\\n\\n17\\n\\nJane Doe 00:04:18.604 --> 00:04:22.564\\n\\nYou train the data are using, uh, the the same target.\\n\\n18\\n\\nJohn Doe 00:04:23.614 --> 00:04:24.334\\n\\nYes.\\n\\n19\\n\\nJohn Doe 00:04:30.634 --> 00:04:47.734\\n\\nI mean, we just, we, we, we were just trying to replicate the results. So I think the my main concern is that the results that maybe we shared last time WH, what were shared with last time. They, we can't. Those are not right in some sense, right? The, the results were done by training and testing.\\n\\n20\\n\\nJohn Doe 00:04:47.764 --> 00:04:48.664\\n\\nOn the same dataset.\\nSummary:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Write a short summary for the meeting transcripts.\\n\\nTranscript: 00:00   [John]   I wanted to share an update on project X today.\\n00:15   [John]   Project X will be completed at the end of the week.\\n00:30   [Jane]  That's great!\\n00:35   [Jane]  I heard from customer Y today, and they agreed to buy our product.\\n00:45   [Joe]  Customer Z said they will too.\\n01:05   [John]   Great news, all around.\\nSummary: John shared an update that project X will be completed end of the week and will be purchased by customers Y and Z.\\n\\nTranscript: 00:00   [Jane]   The goal today is to agree on a design solution.\\n00:12   [John]  I think we should consider choice 1.\\n00:25   [Jane]   I agree\\n00:40   [Joe]  Choice 2 has the advantage that it will take less time.\\n01:03   [John]  Actually, that's a good point.\\n01:30   [Jane]   So, what should we do?\\n01:55   [John]  I'm good with choice 2.\\n02:20   [Joe]  Me too.\\n02:45   [Jane] Done!\\nSummary: Jane, John, and Joe decided to go with choice 2 for the design solution because it will take less time.\\n\\nTranscript: 1\\n\\nJohn Doe 00:00:01.415 --> 00:00:20.675\\n\\nA little bit of context of the email from last night, I've been working on the data from the feature set that came out of the analysis last time.\\n\\n2\\n\\nJohn Doe 00:00:21.334 --> 00:00:42.394\\n\\nThanks for sharing that. We were trying to understand the impact of changing levels of discretization, um, on both our data.\\n\\n3\\n\\nJohn Doe 00:00:42.784 --> 00:01:03.454\\n\\nAnd the original data, um, and 1 of the main things we were trying to to figure it out is, uh, because we did not have access to the notebook, uh, that you ran the analysis with was to how can we reproduce some of the results and in doing so I think we found something sort of fairly critical, which, which it was.\\n\\n4\\n\\nJohn Doe 00:01:03.664 --> 00:01:24.694\\n\\nAnswered earlier this morning, but, um, it's sort of prohibited us from continuing any further analysis in the sense that it seems that the, uh, evaluation of the testing, uh, of the downstream classifier was somehow done on the training data. Um, and the problem is.\\n\\n5\\n\\nJohn Doe 00:01:24.699 --> 00:01:45.004\\n\\nThat if we, um, I mean, obviously, we will have to rectify that, because it's, it's not informative fee kind of, uh, you know, use the training data for testing. But, um, I mean, if if that were in the protocol, just switching the level of visualization of the method.\\n\\n6\\n\\nJohn Doe 00:01:46.774 --> 00:02:06.754\\n\\nUm, to 10 minutes, that was, I think the case in the original setup, uh, takes the to 95% and I think that's kind of what triggered us to understand that that cannot be happening. Um, so 1 of the objectives, uh, if, if the group agrees for today's meeting, I think maybe we could just set up a.\\n\\n7\\n\\nJohn Doe 00:02:07.414 --> 00:02:28.114\\n\\nUm, outline for a consistent evaluation protocol that we can replicate on our side as well. And then, um, we essentially can replicate, uh, reproduce the, the, you know, as long as we can ensure, we can review the numbers. Um, we could just repeat our.\\n\\n8\\n\\nJohn Doe 00:02:28.174 --> 00:02:37.204\\n\\nAnalysis and in the next meeting shared that does that does that sound good to do? Are there any questions 1st of all? I think maybe I should ask that.\\n\\n9\\n\\nJohn Doe 00:02:47.555 --> 00:03:06.215\\n\\nAwesome, no, no questions then in that case, does that sound good to maybe, uh, go through the notebook a little bit, uh, in detail this time to understand the evaluation protocol um, and then we have certain suggestions that, uh, we could make about.\\n\\n10\\n\\nJohn Doe 00:03:06.244 --> 00:03:17.884\\n\\nUm, how we, uh, currently evaluate, um, to just avoid, uh, information leakage from training into the test would that be okay?\\n\\n11\\n\\nJane Doe 00:03:18.304 --> 00:03:25.834\\n\\nAnd maybe a, just to summarize for everyone, it sounds like you ran you rebound the tests that they were doing.\\n\\n12\\n\\nJane Doe 00:03:27.484 --> 00:03:31.594\\n\\nThe team has already done and achieved, uh.\\n\\n13\\n\\nJane Doe 00:03:31.714 --> 00:03:46.924\\n\\nOur score point 95 or something, so quite high, but suggestions that that probably isn't the best marker to evaluate and so we want to go back through it and make some suggestions on the overall approach.\\n\\n14\\n\\nJohn Doe 00:03:47.644 --> 00:03:52.534\\n\\nThat's right. That's right. I think I think the only just to kind of get the, the idea of, like, what we change.\\n\\n15\\n\\nJohn Doe 00:03:52.774 --> 00:04:13.894\\n\\nIf we change the level of discretization of our model to the level of discretization that, uh, was in the notebook for the original data, and then follow the same testing training protocol, which I must say is not, uh, we do get 95% but primarily, because we are testing on training data.\\n\\n16\\n\\nJohn Doe 00:04:13.924 --> 00:04:15.154\\n\\nIs not the right thing to do?\\n\\n17\\n\\nJane Doe 00:04:18.604 --> 00:04:22.564\\n\\nYou train the data are using, uh, the the same target.\\n\\n18\\n\\nJohn Doe 00:04:23.614 --> 00:04:24.334\\n\\nYes.\\n\\n19\\n\\nJohn Doe 00:04:30.634 --> 00:04:47.734\\n\\nI mean, we just, we, we, we were just trying to replicate the results. So I think the my main concern is that the results that maybe we shared last time WH, what were shared with last time. They, we can't. Those are not right in some sense, right? The, the results were done by training and testing.\\n\\n20\\n\\nJohn Doe 00:04:47.764 --> 00:04:48.664\\n\\nOn the same dataset.\\nSummary:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 200,\r\n        \"min_new_tokens\": 50,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:47:59 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=c9a2bd2876c87044"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=c9a2bd2876c87044"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000c9a2bd2876c87044-63a031d12ea32149-01"
								},
								{
									"key": "Tracestate",
									"value": "in=c9a2bd2876c87044;63a031d12ea32149"
								},
								{
									"key": "X-Instana-T",
									"value": "c9a2bd2876c87044"
								},
								{
									"key": "X-Instana-S",
									"value": "63a031d12ea32149"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "60826884d4dfd0b19746b2f9bb416caf"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcbd4e4d57fabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:47:59.476Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"John and Jane are trying to replicate the results from the last analysis. They found out that the testing of the downstream classifier was done on the training data. They want to set up a consistent evaluation protocol that they can replicate on their side.\",\n            \"generated_token_count\": 51,\n            \"input_token_count\": 1623,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				},
				{
					"name": "Earnings Call Summary (google/flan-ul2)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"The following document is a transcript from a financial earnings call.  Read the document and then write a short 1 paragraph summary.\\n\\nDocument: Financial Highlights\\n\\nI’ll start with the financial highlights of the fourth quarter. We delivered $8 billion in revenue, $1.5 billion of operating pre-tax income and operating earnings per share of $1.5. In our seasonally strongest quarter, we generated $2.5 billion of free cash flow. Our revenue for the quarter was up over three percent at constant currency. While the dollar weakened a bit from 90 days ago, it still impacted our reported revenue by over $500 million – and 3 points of growth.  Revenue growth this quarter was again broad based. Product Sales revenue was up eight percent and Services up nine percent. These are our growth vectors and represent over 35 percent of our revenue. Within each of these segments, our growth was pervasive. We also had good growth across our geographies, with mid-single digit growth or better in Americas, EMEA and Asia Pacific. And for the year, we gained share overall. We had strong transactional growth in Product Sales to close the year. At the same time, our recurring revenue, which provides a solid base of revenue and profit, also grew.  Earnings Prepared RemarksEarnings were up 8.5 percent from last year. Looking at our profit metrics for the quarter, we expanded operating pretax margin by 85 basis points. This reflects a strong portfolio mix and improving Product and Consulting margins. These same dynamics drove a 30-basis point increase in operating gross margin. Our expense was down year to year, driven by currency dynamics. Within our base expense, the work we’re doing to digitally transform our operations provides flexibility to continue to invest in innovation and in talent. Our operating tax rate was 7 percent, which is flat versus last year. And our operating earnings per share of $1.5 was up over seven percent. Turning to free cash flow, we generated $2.5 billion in the quarter and $4.5 billion for the year. Our full-year free cash flow is up $1 billion fromlast year. As we talked about all year, we have a few drivers of our free cash flow growth. We had working capital improvements driven by efficiencies in ouroperations. Despite strong collections, the combination of revenue performance above our model and the timing of the transactions in the quarter led to higher-than-expected working capital at the end of the year. This impacted our free cash flow performance versus expectations. Our year-to-year free cash flow growthalso includes a modest tailwind from cash tax payments and lower payments for structural actions, partially offset by increased capex investment.\\n\\n4Q Earnings Prepared RemarksWe ended the year in a strong liquidity position with cash of $4 billion. This is up over half a billion dollars year to year. And our debt balance is down nearly half a billion dollars. Our balance sheet remains strong, and I’d say the same for our retirement-related plans. At year end, our worldwide tax-qualified plansare funded at 57 percent, with the U.S. at 54 percent. Both are up year to year.  We transferred a portion of our U.S. qualified defined benefit plan obligations to insurers, without changing the benefits payable to plan participants. This resulted in a significant non-cash charge in our GAAP results in the third quarter, and we’ll see a benefit in our non-operating charges going forward.\\nSummary:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 300,\r\n        \"min_new_tokens\": 50,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"The following document is a transcript from a financial earnings call.  Read the document and then write a short 1 paragraph summary.\\n\\nDocument: Financial Highlights\\n\\nI’ll start with the financial highlights of the fourth quarter. We delivered $8 billion in revenue, $1.5 billion of operating pre-tax income and operating earnings per share of $1.5. In our seasonally strongest quarter, we generated $2.5 billion of free cash flow. Our revenue for the quarter was up over three percent at constant currency. While the dollar weakened a bit from 90 days ago, it still impacted our reported revenue by over $500 million – and 3 points of growth.  Revenue growth this quarter was again broad based. Product Sales revenue was up eight percent and Services up nine percent. These are our growth vectors and represent over 35 percent of our revenue. Within each of these segments, our growth was pervasive. We also had good growth across our geographies, with mid-single digit growth or better in Americas, EMEA and Asia Pacific. And for the year, we gained share overall. We had strong transactional growth in Product Sales to close the year. At the same time, our recurring revenue, which provides a solid base of revenue and profit, also grew.  Earnings Prepared RemarksEarnings were up 8.5 percent from last year. Looking at our profit metrics for the quarter, we expanded operating pretax margin by 85 basis points. This reflects a strong portfolio mix and improving Product and Consulting margins. These same dynamics drove a 30-basis point increase in operating gross margin. Our expense was down year to year, driven by currency dynamics. Within our base expense, the work we’re doing to digitally transform our operations provides flexibility to continue to invest in innovation and in talent. Our operating tax rate was 7 percent, which is flat versus last year. And our operating earnings per share of $1.5 was up over seven percent. Turning to free cash flow, we generated $2.5 billion in the quarter and $4.5 billion for the year. Our full-year free cash flow is up $1 billion fromlast year. As we talked about all year, we have a few drivers of our free cash flow growth. We had working capital improvements driven by efficiencies in ouroperations. Despite strong collections, the combination of revenue performance above our model and the timing of the transactions in the quarter led to higher-than-expected working capital at the end of the year. This impacted our free cash flow performance versus expectations. Our year-to-year free cash flow growthalso includes a modest tailwind from cash tax payments and lower payments for structural actions, partially offset by increased capex investment.\\n\\n4Q Earnings Prepared RemarksWe ended the year in a strong liquidity position with cash of $4 billion. This is up over half a billion dollars year to year. And our debt balance is down nearly half a billion dollars. Our balance sheet remains strong, and I’d say the same for our retirement-related plans. At year end, our worldwide tax-qualified plansare funded at 57 percent, with the U.S. at 54 percent. Both are up year to year.  We transferred a portion of our U.S. qualified defined benefit plan obligations to insurers, without changing the benefits payable to plan participants. This resulted in a significant non-cash charge in our GAAP results in the third quarter, and we’ll see a benefit in our non-operating charges going forward.\\nSummary:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"greedy\",\r\n        \"max_new_tokens\": 300,\r\n        \"min_new_tokens\": 50,\r\n        \"stop_sequences\": [],\r\n        \"repetition_penalty\": 2\r\n    },\r\n    \"model_id\": \"google/flan-ul2\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:46:57 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=f5f25288d068bb75"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=f5f25288d068bb75"
								},
								{
									"key": "X-Instana-T",
									"value": "f5f25288d068bb75"
								},
								{
									"key": "X-Instana-S",
									"value": "4302e4de967c6b23"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-0000000000000000f5f25288d068bb75-4302e4de967c6b23-01"
								},
								{
									"key": "Tracestate",
									"value": "in=f5f25288d068bb75;4302e4de967c6b23"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "d20ae42c98ff83e4a05b3844e59d080c"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fcbbd01eeafabe-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"google/flan-ul2\",\n    \"created_at\": \"2024-04-05T21:46:57.733Z\",\n    \"results\": [\n        {\n            \"generated_text\": \"Revenue up 3% at constant currency. Operating pretax margin expanded by 85 basis points. Operating earnings per share of $1.5 was up over 7%. Free cash flow generated $2.5 billion in the quarter and $4.5 billion for the year. Full-year free cash flow is up $1 billion from last year.\",\n            \"generated_token_count\": 64,\n            \"input_token_count\": 750,\n            \"stop_reason\": \"eos_token\"\n        }\n    ],\n    \"system\": {\n        \"warnings\": [\n            {\n                \"message\": \"This model is a Non-IBM Product governed by a third-party license that may impose use restrictions and other obligations. By using this model you agree to its terms as identified in the following URL.\",\n                \"id\": \"disclaimer_warning\",\n                \"more_info\": \"https://dataplatform.cloud.ibm.com/docs/content/wsj/analyze-data/fm-models.html?context=wx\"\n            }\n        ]\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Translation",
			"item": [
				{
					"name": "English to French (ibm/granite-20b-multilingual)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Translate the following text from English to French:\\n\\nText: Finally, I welcome paragraph 16 which calls for a review of the way we deal with human rights issues in Parliament.\\nTranslation: Enfin, je me réjouis du paragraphe 16 qui appelle à une révision de la manière dont nous abordons les questions relatives aux droits de l'homme au sein du Parlement.\\n\\nText: I remember very well that we discussed it in a session in Luxembourg.\\nTranslation: Je me souviens très bien que nous en avions parlé lors d'une séance à Luxembourg.\\n\\nText: If we do not greatly increase the use of intelligent technology, we will not achieve our targets.\\nTranslation:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 1024,\r\n        \"min_new_tokens\": 1,\r\n        \"random_seed\": 42,\r\n        \"stop_sequences\": [\r\n            \"\\n\"\r\n        ],\r\n        \"temperature\": 0.5,\r\n        \"top_k\": 50,\r\n        \"top_p\": 0.75,\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Translate the following text from English to French:\\n\\nText: Finally, I welcome paragraph 16 which calls for a review of the way we deal with human rights issues in Parliament.\\nTranslation: Enfin, je me réjouis du paragraphe 16 qui appelle à une révision de la manière dont nous abordons les questions relatives aux droits de l'homme au sein du Parlement.\\n\\nText: I remember very well that we discussed it in a session in Luxembourg.\\nTranslation: Je me souviens très bien que nous en avions parlé lors d'une séance à Luxembourg.\\n\\nText: If we do not greatly increase the use of intelligent technology, we will not achieve our targets.\\nTranslation:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 1024,\r\n        \"min_new_tokens\": 1,\r\n        \"random_seed\": 42,\r\n        \"stop_sequences\": [\r\n            \"\\n\"\r\n        ],\r\n        \"temperature\": 0.5,\r\n        \"top_k\": 50,\r\n        \"top_p\": 0.75,\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:25:29 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=2cce6526f6836d65"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=2cce6526f6836d65"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000002cce6526f6836d65-045d0c1263b43c9b-01"
								},
								{
									"key": "Tracestate",
									"value": "in=2cce6526f6836d65;045d0c1263b43c9b"
								},
								{
									"key": "X-Instana-T",
									"value": "2cce6526f6836d65"
								},
								{
									"key": "X-Instana-S",
									"value": "045d0c1263b43c9b"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "cdfec54375d52f8f04ab88b8351cc8f6"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fc9c60ce2517dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-20b-multilingual\",\n    \"created_at\": \"2024-04-05T21:25:29.742Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" Si nous ne faisons pas un usage plus important de la technologie intelligente, nous ne parviendrons pas à atteindre nos objectifs.\",\n            \"generated_token_count\": 38,\n            \"input_token_count\": 174,\n            \"stop_reason\": \"stop_sequence\",\n            \"seed\": 42\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "English to Spanish (ibm/granite-20b-multilingual)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"Translate the following text from English to Spanish:\\n\\nText: So far, I have not been terribly encouraged by the stance adopted by the Commission.\\nTranslation: Hasta ahora no me ha animado mucho la postura adoptada por la Comisión.\\n\\nText: I am very pleased to see that the joint resolution adopts the suggestion we made.\\nTranslation:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 1024,\r\n        \"min_new_tokens\": 1,\r\n        \"random_seed\": 42,\r\n        \"stop_sequences\": [\r\n            \"\\n\"\r\n        ],\r\n        \"temperature\": 0.5,\r\n        \"top_k\": 50,\r\n        \"top_p\": 0.75,\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"{{projectId}}\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ml",
								"v1",
								"text",
								"generation"
							],
							"query": [
								{
									"key": "version",
									"value": "2023-05-29"
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"input\": \"Translate the following text from English to Spanish:\\n\\nText: So far, I have not been terribly encouraged by the stance adopted by the Commission.\\nTranslation: Hasta ahora no me ha animado mucho la postura adoptada por la Comisión.\\n\\nText: I am very pleased to see that the joint resolution adopts the suggestion we made.\\nTranslation:\",\r\n    \"parameters\": {\r\n        \"decoding_method\": \"sample\",\r\n        \"max_new_tokens\": 1024,\r\n        \"min_new_tokens\": 1,\r\n        \"random_seed\": 42,\r\n        \"stop_sequences\": [\r\n            \"\\n\"\r\n        ],\r\n        \"temperature\": 0.5,\r\n        \"top_k\": 50,\r\n        \"top_p\": 0.75,\r\n        \"repetition_penalty\": 1\r\n    },\r\n    \"model_id\": \"ibm/granite-20b-multilingual\",\r\n    \"project_id\": \"76043f80-f523-4609-9337-a68b133921ab\",\r\n    \"moderations\": {\r\n        \"hap\": {\r\n            \"input\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            },\r\n            \"output\": {\r\n                \"enabled\": true,\r\n                \"threshold\": 0.5,\r\n                \"mask\": {\r\n                    \"remove_entity_value\": true\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/ml/v1/text/generation?version=2023-05-29",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ml",
										"v1",
										"text",
										"generation"
									],
									"query": [
										{
											"key": "version",
											"value": "2023-05-29"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 05 Apr 2024 21:22:09 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server-timing",
									"value": "intid;desc=3ce713490cc3c167"
								},
								{
									"key": "Server-Timing",
									"value": "intid;desc=3ce713490cc3c167"
								},
								{
									"key": "X-Instana-S",
									"value": "6603a301c85149c3"
								},
								{
									"key": "X-Instana-L",
									"value": "1"
								},
								{
									"key": "Traceparent",
									"value": "00-00000000000000003ce713490cc3c167-6603a301c85149c3-01"
								},
								{
									"key": "Tracestate",
									"value": "in=3ce713490cc3c167;6603a301c85149c3"
								},
								{
									"key": "X-Instana-T",
									"value": "3ce713490cc3c167"
								},
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'none'; script-src 'self'; connect-src 'self'; img-src 'self'; style-src 'self'; frame-ancestors 'none'; form-action 'self';"
								},
								{
									"key": "Referrer-Policy",
									"value": "strict-origin"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache, no-store, must-revalidate"
								},
								{
									"key": "X-Global-Transaction-Id",
									"value": "0856f8b8a31c55243508889889fc6d05"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Xss-Protection",
									"value": "1; mode=block"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=31536000; includeSubDomains"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "86fc977d498e17dc-SJC"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"model_id\": \"ibm/granite-20b-multilingual\",\n    \"created_at\": \"2024-04-05T21:22:09.121Z\",\n    \"results\": [\n        {\n            \"generated_text\": \" Estoy muy contento de ver que la resolución conjunta adopta la sugerencia que hicimos.\",\n            \"generated_token_count\": 26,\n            \"input_token_count\": 88,\n            \"stop_reason\": \"eos_token\",\n            \"seed\": 42,\n            \"moderations\": {\n                \"hap\": [\n                    {\n                        \"score\": 0.5639350414276123,\n                        \"input\": false,\n                        \"position\": {\n                            \"start\": 1,\n                            \"end\": 87\n                        },\n                        \"entity\": \"has_HAP\",\n                        \"word\": \"Estoy muy contento de ver que la resolución conjunta adopta la sugerencia que hicimos.\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://us-south.ml.cloud.ibm.com",
			"type": "string"
		},
		{
			"key": "projectId",
			"value": "<BringYourOwn>",
			"type": "string"
		},
		{
			"key": "apiKey",
			"value": "<BringYourOwn>",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": ""
		}
	]
}